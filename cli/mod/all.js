#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs"));
const download_1 = require("../../lib/download");
const threads_1 = __importDefault(require("../lib/threads"));
const novel_epub_1 = __importDefault(require("novel-epub"));
const fs_extra_1 = require("fs-extra");
const bluebird_1 = __importDefault(require("bluebird"));
const const_1 = require("../../lib/const");
let argv = yargs_1.default
    .option('siteID', {
    string: true,
    demandOption: true,
})
    .option('novel_id', {
    string: true,
    demandOption: true,
})
    .option('outputDir', {
    string: true,
})
    .argv;
bluebird_1.default
    .resolve(download_1.downloadNovel2({
    novel_id: argv.novel_id,
    siteID: argv.siteID,
    outputRoot: argv.outputDir,
    useCached: true,
}))
    .then(async ({ options, download, }) => {
    let { cwd, novel_id, IDKEY, outputDir, novel, ...arr } = await download()
        .tapCatch(e => {
        console.error(`下載來源時發生錯誤`, e);
    });
    console.log(`來源下載完成，開始處理排版`, outputDir);
    await threads_1.default(argv.novel_id, IDKEY, outputDir)
        .tapCatch(e => {
        console.error(`處理排版時發生錯誤`, e);
    });
    console.log(`排版完成，開始打包 epub`);
    let epub = await novel_epub_1.default({
        inputPath: cwd,
        outputPath: cwd,
        padEndDate: false,
        filename: novel_id,
        downloadRemoteFile: true,
    })
        .tapCatch(e => {
        console.error(`打包 epub 時發生錯誤`, e);
    });
    let map_file = const_1.__cacheMapFile;
    let map = await fs_extra_1.readJSON(map_file)
        .catch(e => ({}));
    map[argv.siteID] = map[argv.siteID] || {};
    map[IDKEY] = map[IDKEY] || {};
    let _data = {
        ...arr,
        cwd,
        IDKEY,
        novel_id,
        outputDir,
        epub: epub.file,
        status: 2,
        timestamp: Date.now(),
    };
    map[argv.siteID][novel_id] = map[argv.siteID][argv.novel_id] = map[IDKEY][novel_id] = map[IDKEY][argv.novel_id] = _data;
    await fs_extra_1.outputJSON(map_file, map, {
        spaces: 2,
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBLGtEQUEwQjtBQUMxQixpREFBMkQ7QUFDM0QsNkRBQXlDO0FBQ3pDLDREQUFtQztBQUNuQyx1Q0FBZ0Q7QUFFaEQsd0RBQWdDO0FBRWhDLDJDQUFpRDtBQUVqRCxJQUFJLElBQUksR0FBRyxlQUFLO0tBQ2QsTUFBTSxDQUFDLFFBQVEsRUFBRTtJQUNqQixNQUFNLEVBQUUsSUFBSTtJQUNaLFlBQVksRUFBRSxJQUFJO0NBQ2xCLENBQUM7S0FDRCxNQUFNLENBQUMsVUFBVSxFQUFFO0lBQ25CLE1BQU0sRUFBRSxJQUFJO0lBQ1osWUFBWSxFQUFFLElBQUk7Q0FDbEIsQ0FBQztLQUNELE1BQU0sQ0FBQyxXQUFXLEVBQUU7SUFDcEIsTUFBTSxFQUFFLElBQUk7Q0FDWixDQUFDO0tBQ0QsSUFBSSxDQUNMO0FBRUQsa0JBQVE7S0FDTixPQUFPLENBQUMseUJBQWMsQ0FBQztJQUN2QixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7SUFDdkIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO0lBQ25CLFVBQVUsRUFBRSxJQUFJLENBQUMsU0FBUztJQUMxQixTQUFTLEVBQUUsSUFBSTtDQUNmLENBQUMsQ0FBQztLQUNGLElBQUksQ0FBQyxLQUFLLEVBQUUsRUFDWixPQUFPLEVBQ1AsUUFBUSxHQUNSLEVBQUUsRUFBRTtJQUVKLElBQUksRUFDSCxHQUFHLEVBQ0gsUUFBUSxFQUNSLEtBQUssRUFDTCxTQUFTLEVBQ1QsS0FBSyxFQUNMLEdBQUcsR0FBRyxFQUNOLEdBQUcsTUFBTSxRQUFRLEVBQUU7U0FDbEIsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ2IsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDOUIsQ0FBQyxDQUFDLENBQ0Y7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUV4QyxNQUFNLGlCQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsU0FBUyxDQUFDO1NBQ2hELFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQzlCLENBQUMsQ0FBQyxDQUNGO0lBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBRTlCLElBQUksSUFBSSxHQUFHLE1BQU0sb0JBQVMsQ0FBQztRQUMxQixTQUFTLEVBQUUsR0FBRztRQUNkLFVBQVUsRUFBRSxHQUFHO1FBQ2YsVUFBVSxFQUFFLEtBQUs7UUFDakIsUUFBUSxFQUFFLFFBQVE7UUFFbEIsa0JBQWtCLEVBQUUsSUFBSTtLQUN4QixDQUFDO1NBQ0EsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ2IsT0FBTyxDQUFDLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLENBQUE7SUFDbEMsQ0FBQyxDQUFDLENBQ0Y7SUFJRCxJQUFJLFFBQVEsR0FBRyxzQkFBYyxDQUFDO0lBRTlCLElBQUksR0FBRyxHQUFjLE1BQU0sbUJBQVEsQ0FBQyxRQUFRLENBQUM7U0FDM0MsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUNqQjtJQUVELEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDMUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFOUIsSUFBSSxLQUFLLEdBQWlCO1FBQ3pCLEdBQUcsR0FBRztRQUNOLEdBQUc7UUFDSCxLQUFLO1FBQ0wsUUFBUTtRQUNSLFNBQVM7UUFDVCxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7UUFDZixNQUFNLEdBQTRCO1FBQ2xDLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO0tBQ3JCLENBQUM7SUFFRixHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEtBQUssQ0FBQztJQUV4SCxNQUFNLHFCQUFVLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtRQUMvQixNQUFNLEVBQUUsQ0FBQztLQUNULENBQUMsQ0FBQTtBQUVILENBQUMsQ0FBQyxDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiIyEvdXNyL2Jpbi9lbnYgbm9kZVxuXG5pbXBvcnQgeWFyZ3MgZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgZG93bmxvYWROb3ZlbDIsIGlzNTA0IH0gZnJvbSAnLi4vLi4vbGliL2Rvd25sb2FkJztcbmltcG9ydCBoYW5kbGVBc3luYyBmcm9tICcuLi9saWIvdGhyZWFkcyc7XG5pbXBvcnQgbm92ZWxFcHViIGZyb20gJ25vdmVsLWVwdWInO1xuaW1wb3J0IHsgb3V0cHV0SlNPTiwgcmVhZEpTT04gfSBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgQmx1ZWJpcmQgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgSUNhY2hlTWFwUm93LCBJQ2FjaGVNYXAsIEVudW1DYWNoZU1hcFJvd1N0YXR1cyB9IGZyb20gJy4uLy4uL2xpYi90eXBlcyc7XG5pbXBvcnQgeyBfX2NhY2hlTWFwRmlsZSB9IGZyb20gJy4uLy4uL2xpYi9jb25zdCc7XG5cbmxldCBhcmd2ID0geWFyZ3Ncblx0Lm9wdGlvbignc2l0ZUlEJywge1xuXHRcdHN0cmluZzogdHJ1ZSxcblx0XHRkZW1hbmRPcHRpb246IHRydWUsXG5cdH0pXG5cdC5vcHRpb24oJ25vdmVsX2lkJywge1xuXHRcdHN0cmluZzogdHJ1ZSxcblx0XHRkZW1hbmRPcHRpb246IHRydWUsXG5cdH0pXG5cdC5vcHRpb24oJ291dHB1dERpcicsIHtcblx0XHRzdHJpbmc6IHRydWUsXG5cdH0pXG5cdC5hcmd2XG47XG5cbkJsdWViaXJkXG5cdC5yZXNvbHZlKGRvd25sb2FkTm92ZWwyKHtcblx0XHRub3ZlbF9pZDogYXJndi5ub3ZlbF9pZCxcblx0XHRzaXRlSUQ6IGFyZ3Yuc2l0ZUlELFxuXHRcdG91dHB1dFJvb3Q6IGFyZ3Yub3V0cHV0RGlyLFxuXHRcdHVzZUNhY2hlZDogdHJ1ZSxcblx0fSkpXG5cdC50aGVuKGFzeW5jICh7XG5cdFx0b3B0aW9ucyxcblx0XHRkb3dubG9hZCxcblx0fSkgPT5cblx0e1xuXHRcdGxldCB7XG5cdFx0XHRjd2QsXG5cdFx0XHRub3ZlbF9pZCxcblx0XHRcdElES0VZLFxuXHRcdFx0b3V0cHV0RGlyLFxuXHRcdFx0bm92ZWwsXG5cdFx0XHQuLi5hcnJcblx0XHR9ID0gYXdhaXQgZG93bmxvYWQoKVxuXHRcdFx0LnRhcENhdGNoKGUgPT4ge1xuXHRcdFx0XHRjb25zb2xlLmVycm9yKGDkuIvovInkvobmupDmmYLnmbznlJ/pjK/oqqRgLCBlKVxuXHRcdFx0fSlcblx0XHQ7XG5cblx0XHRjb25zb2xlLmxvZyhg5L6G5rqQ5LiL6LyJ5a6M5oiQ77yM6ZaL5aeL6JmV55CG5o6S54mIYCwgb3V0cHV0RGlyKTtcblxuXHRcdGF3YWl0IGhhbmRsZUFzeW5jKGFyZ3Yubm92ZWxfaWQsIElES0VZLCBvdXRwdXREaXIpXG5cdFx0XHQudGFwQ2F0Y2goZSA9PiB7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoYOiZleeQhuaOkueJiOaZgueZvOeUn+mMr+iqpGAsIGUpXG5cdFx0XHR9KVxuXHRcdDtcblxuXHRcdGNvbnNvbGUubG9nKGDmjpLniYjlrozmiJDvvIzplovlp4vmiZPljIUgZXB1YmApO1xuXG5cdFx0bGV0IGVwdWIgPSBhd2FpdCBub3ZlbEVwdWIoe1xuXHRcdFx0aW5wdXRQYXRoOiBjd2QsXG5cdFx0XHRvdXRwdXRQYXRoOiBjd2QsXG5cdFx0XHRwYWRFbmREYXRlOiBmYWxzZSxcblx0XHRcdGZpbGVuYW1lOiBub3ZlbF9pZCxcblx0XHRcdC8vbm9Mb2c6IHRydWUsXG5cdFx0XHRkb3dubG9hZFJlbW90ZUZpbGU6IHRydWUsXG5cdFx0fSlcblx0XHRcdC50YXBDYXRjaChlID0+IHtcblx0XHRcdFx0Y29uc29sZS5lcnJvcihg5omT5YyFIGVwdWIg5pmC55m855Sf6Yyv6KqkYCwgZSlcblx0XHRcdH0pXG5cdFx0O1xuXG5cdFx0Ly9jb25zb2xlLmRpcihlcHViLmZpbGUpO1xuXG5cdFx0bGV0IG1hcF9maWxlID0gX19jYWNoZU1hcEZpbGU7XG5cblx0XHRsZXQgbWFwOiBJQ2FjaGVNYXAgPSBhd2FpdCByZWFkSlNPTihtYXBfZmlsZSlcblx0XHRcdC5jYXRjaChlID0+ICh7fSkpXG5cdFx0O1xuXG5cdFx0bWFwW2FyZ3Yuc2l0ZUlEXSA9IG1hcFthcmd2LnNpdGVJRF0gfHwge307XG5cdFx0bWFwW0lES0VZXSA9IG1hcFtJREtFWV0gfHwge307XG5cblx0XHRsZXQgX2RhdGE6IElDYWNoZU1hcFJvdyA9IHtcblx0XHRcdC4uLmFycixcblx0XHRcdGN3ZCxcblx0XHRcdElES0VZLFxuXHRcdFx0bm92ZWxfaWQsXG5cdFx0XHRvdXRwdXREaXIsXG5cdFx0XHRlcHViOiBlcHViLmZpbGUsXG5cdFx0XHRzdGF0dXM6IEVudW1DYWNoZU1hcFJvd1N0YXR1cy5ET05FLFxuXHRcdFx0dGltZXN0YW1wOiBEYXRlLm5vdygpLFxuXHRcdH07XG5cblx0XHRtYXBbYXJndi5zaXRlSURdW25vdmVsX2lkXSA9IG1hcFthcmd2LnNpdGVJRF1bYXJndi5ub3ZlbF9pZF0gPSBtYXBbSURLRVldW25vdmVsX2lkXSA9IG1hcFtJREtFWV1bYXJndi5ub3ZlbF9pZF0gPSBfZGF0YTtcblxuXHRcdGF3YWl0IG91dHB1dEpTT04obWFwX2ZpbGUsIG1hcCwge1xuXHRcdFx0c3BhY2VzOiAyLFxuXHRcdH0pXG5cblx0fSlcbjtcbiJdfQ==