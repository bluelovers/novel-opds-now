"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const all_1 = require("novel-downloader/src/all");
const child_process_1 = require("child_process");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const bluebird_1 = __importDefault(require("bluebird"));
const stream_1 = require("stream");
const file_type_1 = require("file-type");
const const_1 = require("./lib/const");
const app = express_1.default();
console.log(`build cache`);
child_process_1.spawnSync('node', [
    path_1.join(__dirname, `./cli/cache.js`),
]);
app.use('/file/:siteID/:id', (req, res) => {
    return bluebird_1.default
        .resolve()
        .then(async () => {
        console.log(req.baseUrl, req.url, req.params);
        let siteID = req.params.siteID;
        let novel_id = req.params.id;
        if (siteID.toLowerCase() === 'dmzj') {
            siteID = all_1.EnumNovelSiteList.NovelSiteDmzjApi;
        }
        let map_file = const_1.__cacheMapFile;
        let cp = child_process_1.spawnSync('node', [
            path_1.join(__dirname, `./cli/cli.js`),
            '--mod',
            'all',
            '--siteID',
            siteID,
            '--novel_id',
            novel_id,
        ], {
            stdio: 'inherit',
        });
        let map = await fs_extra_1.readJSON(map_file);
        let _data = map[siteID][novel_id];
        if (map[_data.siteID])
            delete map[_data.siteID][_data.novel_id2];
        if (map[_data.IDKEY])
            delete map[_data.IDKEY][_data.novel_id2];
        if (map[_data.siteID])
            delete map[_data.siteID][_data.novel_id];
        if (map[_data.IDKEY])
            delete map[_data.IDKEY][_data.novel_id];
        if (map[siteID])
            delete map[siteID][novel_id];
        await fs_extra_1.writeJSON(map_file, map, { spaces: 2 }).catch(e => {
            console.error(e);
        });
        return _data;
    })
        .then(async (data) => {
        let fileContents = await fs_extra_1.readFile(data.epub);
        let readStream = new stream_1.PassThrough();
        readStream.end(fileContents);
        let { mime, ext } = await file_type_1.fromBuffer(fileContents);
        if (ext === 'epub' && mime === 'application/zip') {
            mime = 'application/epub+zip';
        }
        res.set('Content-disposition', 'attachment; filename=' + data.IDKEY + '_' + path_1.basename(data.epub));
        res.set('Content-Type', mime);
        console.log(`send file to client`);
        readStream.pipe(res);
        if (typeof data.removeCallback === 'function') {
            data.removeCallback();
        }
        else {
            fs_extra_1.remove(data.outputDir);
        }
    })
        .catch(e => {
        let { message } = e;
        if (e.code === 'ENOENT') {
            message = `id 不存在 或 伺服器離線`;
        }
        res.json({
            error: message,
            params: req.params,
        });
        console.error(`catch error`, e);
    });
});
app.use('/*', (req, res) => res.end('Welcome to micro'));
console.log(`server setup ready`);
exports.default = app;
//# sourceMappingURL=data:application/json;base64,