"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.gun = exports.useGunRoot = exports.useGun = exports.setupGun = void 0;
const gun_1 = __importDefault(require("gun"));
require("gun-tag");
const path_1 = require("path");
const const_1 = require("../../lib/const");
const fs_extra_1 = require("fs-extra");
const logger_1 = __importDefault(require("debug-color2/logger"));
let gun;
exports.gun = gun;
gun_1.default.log = Object.assign(() => { }, gun_1.default.log, {
    verbose: false,
});
gun_1.default.log.off = true;
console.LOG = false;
function setupGun(app) {
    let file = path_1.join(const_1.OUTPUT_DIR, 'novel-opds-now.cache', 'radata');
    fs_extra_1.ensureDirSync(file);
    let _gun = new gun_1.default({
        web: app,
        peers: [
            "https://my-test-gun-server.herokuapp.com/gun",
        ],
        file,
        log() {
        },
    });
    logger_1.default.debug(`P2P 緩存位於 ${file}`);
    exports.gun = gun = _gun;
    return _gun;
}
exports.setupGun = setupGun;
function useGun() {
    return useGunRoot()
        .get('epub-file');
}
exports.useGun = useGun;
function useGunRoot() {
    return gun || (exports.gun = gun = setupGun());
}
exports.useGunRoot = useGunRoot;
exports.default = useGun;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzZXR1cC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFJQSw4Q0FBc0I7QUFFdEIsbUJBQWlCO0FBR2pCLCtCQUE0QjtBQUM1QiwyQ0FBNkM7QUFDN0MsdUNBQXlDO0FBQ3pDLGlFQUEyQztBQU8zQyxJQUFJLEdBQWdDLENBQUM7QUErRDVCLGtCQUFHO0FBNURaLGFBQUcsQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsR0FBRSxDQUFDLEVBQUUsYUFBRyxDQUFDLEdBQUcsRUFBRTtJQUMxQyxPQUFPLEVBQUUsS0FBSztDQUNkLENBQUMsQ0FBQztBQUVILGFBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQztBQUVuQixPQUFPLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQztBQUtwQixTQUFnQixRQUFRLENBQUMsR0FBc0I7SUFFOUMsSUFBSSxJQUFJLEdBQUcsV0FBSSxDQUFDLGtCQUFVLEVBQUUsc0JBQXNCLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDOUQsd0JBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUVwQixJQUFJLElBQUksR0FBRyxJQUFJLGFBQUcsQ0FJZjtRQUNGLEdBQUcsRUFBRSxHQUFHO1FBQ1IsS0FBSyxFQUFFO1lBSU4sOENBQThDO1NBQzlDO1FBQ0QsSUFBSTtRQUNKLEdBQUc7UUFHSCxDQUFDO0tBQ0QsQ0FBQyxDQUFDO0lBRUgsZ0JBQVEsQ0FBQyxLQUFLLENBQUMsWUFBWSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRW5DLGNBQUEsR0FBRyxHQUFHLElBQUksQ0FBQztJQUVYLE9BQU8sSUFBSSxDQUFBO0FBQ1osQ0FBQztBQTdCRCw0QkE2QkM7QUFLRCxTQUFnQixNQUFNO0lBRXJCLE9BQU8sVUFBVSxFQUFFO1NBQ2pCLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FDaEI7QUFDSCxDQUFDO0FBTEQsd0JBS0M7QUFLRCxTQUFnQixVQUFVO0lBRXpCLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBQSxHQUFHLEdBQUcsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUNsQyxDQUFDO0FBSEQsZ0NBR0M7QUFJRCxrQkFBZSxNQUFNLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBkZXByZWNhdGVkXG4gKi9cblxuaW1wb3J0IEd1biBmcm9tICdndW4nO1xuLy9pbXBvcnQgJ2d1bi9saWIvc2VydmVyJztcbmltcG9ydCAnZ3VuLXRhZyc7XG5pbXBvcnQgdHlwZSB7IEV4cHJlc3MgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCBfX3Jvb3QgZnJvbSAnLi4vLi4vbGliL19fcm9vdCc7XG5pbXBvcnQgeyBqb2luIH0gZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBPVVRQVVRfRElSIH0gZnJvbSAnLi4vLi4vbGliL2NvbnN0JztcbmltcG9ydCB7IGVuc3VyZURpclN5bmMgfSBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgX2NvbnNvbGUgZnJvbSAnZGVidWctY29sb3IyL2xvZ2dlcic7XG5pbXBvcnQgdHlwZSB7IFNlcnZlciB9IGZyb20gJ2h0dHAnO1xuaW1wb3J0IHsgSUd1blN0YXRpYyB9IGZyb20gJ2d1bi90eXBlcy9zdGF0aWMnO1xuaW1wb3J0IHR5cGUgeyBJR3VuRXB1Yk5vZGUgfSBmcm9tICcuLi8uLi9saWIvdHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBFbnVtSURLRVlMaXN0LCBFbnVtSURLRVlMaXN0U3RyaW5nIH0gZnJvbSAnbm92ZWwtZG93bmxvYWRlci9zcmMvYWxsL2NvbnN0JztcbmltcG9ydCBSYWRpc2sgZnJvbSAnZ3VuL2xpYi9yYWRpc2snO1xuXG5sZXQgZ3VuOiBSZXR1cm5UeXBlPHR5cGVvZiBzZXR1cEd1bj47XG5cbi8vIEB0cy1pZ25vcmVcbkd1bi5sb2cgPSBPYmplY3QuYXNzaWduKCgpID0+IHt9LCBHdW4ubG9nLCB7XG5cdHZlcmJvc2U6IGZhbHNlLFxufSk7XG4vLyBAdHMtaWdub3JlXG5HdW4ubG9nLm9mZiA9IHRydWU7XG4vLyBAdHMtaWdub3JlXG5jb25zb2xlLkxPRyA9IGZhbHNlO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cEd1bihhcHA/OiBFeHByZXNzIHwgU2VydmVyKVxue1xuXHRsZXQgZmlsZSA9IGpvaW4oT1VUUFVUX0RJUiwgJ25vdmVsLW9wZHMtbm93LmNhY2hlJywgJ3JhZGF0YScpO1xuXHRlbnN1cmVEaXJTeW5jKGZpbGUpO1xuXG5cdGxldCBfZ3VuID0gbmV3IEd1bjx7XG5cdFx0J2VwdWItZmlsZSc6IHtcblx0XHRcdFtLIGluIEVudW1JREtFWUxpc3RTdHJpbmcgfCBFbnVtSURLRVlMaXN0XTogUmVjb3JkPHN0cmluZywgSUd1bkVwdWJOb2RlPlxuXHRcdH1cblx0fT4oe1xuXHRcdHdlYjogYXBwLFxuXHRcdHBlZXJzOiBbXG5cdFx0XHQvL1wiaHR0cDovL2xvY2FsaG9zdDozMDAwL2d1blwiLFxuXHRcdFx0Ly9cImh0dHBzOi8vZ3VuanMuaGVyb2t1YXBwLmNvbS9ndW5cIixcblx0XHRcdC8vXCJodHRwOi8vbm1yLmlvOjg3NjUvZ3VuXCIsXG5cdFx0XHRcImh0dHBzOi8vbXktdGVzdC1ndW4tc2VydmVyLmhlcm9rdWFwcC5jb20vZ3VuXCIsXG5cdFx0XSxcblx0XHRmaWxlLFxuXHRcdGxvZygpXG5cdFx0e1xuXG5cdFx0fSxcblx0fSk7XG5cblx0X2NvbnNvbGUuZGVidWcoYFAyUCDnt6nlrZjkvY3mlrwgJHtmaWxlfWApO1xuXG5cdGd1biA9IF9ndW47XG5cblx0cmV0dXJuIF9ndW5cbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlR3VuKClcbntcblx0cmV0dXJuIHVzZUd1blJvb3QoKVxuXHRcdC5nZXQoJ2VwdWItZmlsZScpXG5cdFx0O1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VHdW5Sb290KClcbntcblx0cmV0dXJuIGd1biB8fCAoZ3VuID0gc2V0dXBHdW4oKSk7XG59XG5cbmV4cG9ydCB7IGd1biB9XG5cbmV4cG9ydCBkZWZhdWx0IHVzZUd1blxuIl19