"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const path_1 = require("path");
const file_1 = __importDefault(require("./file"));
const __root_1 = __importDefault(require("../lib/__root"));
const serve_favicon_1 = __importDefault(require("serve-favicon"));
require("./init");
const opds_1 = __importDefault(require("./opds"));
const search_1 = __importDefault(require("./search"));
const app = express_1.default();
app.use(serve_favicon_1.default(path_1.join(__root_1.default, 'static', 'favicon.png')));
app.use('/file', file_1.default());
app.use('/opds', opds_1.default());
app.use('/search', search_1.default());
app.use('/*', (req, res, next) => {
    console.log(req.method, req.baseUrl, req.url, req.params);
    next();
});
app.use('/.status', (req, res, next) => {
    console.log(req.headers);
    let url;
    try {
        url = new URL('/opds', req.headers.host).href;
    }
    catch (e) { }
    ;
    if (!url) {
        url = (req.headers.host || '') + '/opds';
    }
    return res.json({
        timestamp: Date.now(),
        live: true,
        opds: url,
        opds_qr: 'https://chart.apis.google.com/chart?cht=qr&chs=300x300&chl=' + url,
    });
});
app.use('/*', (req, res) => {
    res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
    res.charset = 'utf-8';
    let html = '';
    res.end(`${html}Welcome to micro<p>請將 <a href="/opds"><script>document.write(window.location.origin + '/opds')</script></a> 加入閱讀器的訂閱內</p><p><script>document.write('<img src="https://chart.apis.google.com/chart?cht=qr&chs=300x300&chl=' + window.location.origin + '/opds"/>')</script></p>`);
});
console.debug(`server setup ready`);
exports.default = app;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUlBLHNEQUE4QjtBQUk5QiwrQkFBc0M7QUFNdEMsa0RBQWlDO0FBQ2pDLDJEQUFtQztBQUNuQyxrRUFBb0M7QUFHcEMsa0JBQWdCO0FBQ2hCLGtEQUFpQztBQUdqQyxzREFBcUM7QUFFckMsTUFBTSxHQUFHLEdBQUcsaUJBQU8sRUFBRSxDQUFDO0FBSXRCLEdBQUcsQ0FBQyxHQUFHLENBQUMsdUJBQU8sQ0FBQyxXQUFJLENBQUMsZ0JBQU0sRUFBRSxRQUFRLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRXhELEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLGNBQVcsRUFBRSxDQUFDLENBQUM7QUFDaEMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsY0FBVyxFQUFFLENBQUMsQ0FBQztBQUNoQyxHQUFHLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxnQkFBYSxFQUFFLENBQUMsQ0FBQztBQUVwQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEVBQUU7SUFDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUQsSUFBSSxFQUFFLENBQUM7QUFDUixDQUFDLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtJQUV0QyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUV4QixJQUFJLEdBQVcsQ0FBQztJQUVoQixJQUNBO1FBQ0MsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQztLQUM5QztJQUNELE9BQU8sQ0FBQyxFQUFFLEdBQUU7SUFBQSxDQUFDO0lBRWIsSUFBSSxDQUFDLEdBQUcsRUFDUjtRQUNDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQTtLQUN4QztJQUVELE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQztRQUNmLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFO1FBQ3JCLElBQUksRUFBRSxJQUFJO1FBQ1YsSUFBSSxFQUFFLEdBQUc7UUFDVCxPQUFPLEVBQUUsNkRBQTZELEdBQUcsR0FBRztLQUM1RSxDQUFDLENBQUE7QUFFSCxDQUFDLENBQUMsQ0FBQztBQUVILEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO0lBRTFCLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEVBQUMsY0FBYyxFQUFFLDBCQUEwQixFQUFDLENBQUMsQ0FBQztJQUNqRSxHQUFHLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUd0QixJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7SUFFZCxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxnUkFBZ1IsQ0FBQyxDQUFBO0FBQ2pTLENBQUMsQ0FBQyxDQUFDO0FBRUgsT0FBTyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQ3BDLGtCQUFlLEdBQUcsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMjAvMS8yOC5cbiAqL1xuaW1wb3J0IG1pY3JvLCB7IFJlcXVlc3RIYW5kbGVyLCBidWZmZXIsIHRleHQsIGpzb24gfSBmcm9tICdtaWNybyc7XG5pbXBvcnQgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IEVudW1Ob3ZlbFNpdGVMaXN0IH0gZnJvbSAnbm92ZWwtZG93bmxvYWRlci9zcmMvYWxsL2NvbnN0JztcbmltcG9ydCB7IHNwYXduU3luYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHsgcmVhZEpTT04sIHJlYWRKU09OU3luYywgcmVhZEZpbGUsIHJlbW92ZSwgd3JpdGVKU09OIH0gZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHsgam9pbiwgYmFzZW5hbWUgfSBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IEJsdWViaXJkIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IElDYWNoZU1hcCB9IGZyb20gJy4uL2xpYi90eXBlcyc7XG5pbXBvcnQgeyBQYXNzVGhyb3VnaCB9IGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgeyBmcm9tQnVmZmVyIH0gZnJvbSAnZmlsZS10eXBlJztcbmltcG9ydCB7IF9fY2FjaGVNYXBGaWxlIH0gZnJvbSAnLi4vbGliL2NvbnN0JztcbmltcG9ydCBmaWxlSGFuZGxlciBmcm9tICcuL2ZpbGUnO1xuaW1wb3J0IF9fcm9vdCBmcm9tICcuLi9saWIvX19yb290JztcbmltcG9ydCBmYXZpY29uIGZyb20gJ3NlcnZlLWZhdmljb24nO1xuLy9pbXBvcnQgeyBzZXR1cEd1biB9IGZyb20gJy4vZ3VuL3NldHVwJztcblxuaW1wb3J0ICcuL2luaXQnO1xuaW1wb3J0IG9wZHNIYW5kbGVyIGZyb20gJy4vb3Bkcyc7XG4vL2ltcG9ydCBndW5TZXJ2ZSBmcm9tICdndW4vbGliL3NlcnZlJztcbi8vaW1wb3J0IGd1bkh0dHAgZnJvbSAnZ3VuL2xpYi9odHRwJztcbmltcG9ydCBzZWFyY2hIYW5kbGVyIGZyb20gXCIuL3NlYXJjaFwiO1xuXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5cbi8vYXBwLnVzZShndW5TZXJ2ZSk7XG4vL2FwcC51c2UoJy9ndW4nLCBndW5IdHRwKTtcbmFwcC51c2UoZmF2aWNvbihqb2luKF9fcm9vdCwgJ3N0YXRpYycsICdmYXZpY29uLnBuZycpKSk7XG5cbmFwcC51c2UoJy9maWxlJywgZmlsZUhhbmRsZXIoKSk7XG5hcHAudXNlKCcvb3BkcycsIG9wZHNIYW5kbGVyKCkpO1xuYXBwLnVzZSgnL3NlYXJjaCcsIHNlYXJjaEhhbmRsZXIoKSk7XG5cbmFwcC51c2UoJy8qJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG5cdGNvbnNvbGUubG9nKHJlcS5tZXRob2QsIHJlcS5iYXNlVXJsLCByZXEudXJsLCByZXEucGFyYW1zKTtcblx0bmV4dCgpO1xufSk7XG5cbmFwcC51c2UoJy8uc3RhdHVzJywgKHJlcSwgcmVzLCBuZXh0KSA9PiB7XG5cblx0Y29uc29sZS5sb2cocmVxLmhlYWRlcnMpXG5cblx0bGV0IHVybDogc3RyaW5nO1xuXG5cdHRyeVxuXHR7XG5cdFx0dXJsID0gbmV3IFVSTCgnL29wZHMnLCByZXEuaGVhZGVycy5ob3N0KS5ocmVmO1xuXHR9XG5cdGNhdGNoIChlKSB7fTtcblxuXHRpZiAoIXVybClcblx0e1xuXHRcdHVybCA9IChyZXEuaGVhZGVycy5ob3N0IHx8ICcnKSArICcvb3Bkcydcblx0fVxuXG5cdHJldHVybiByZXMuanNvbih7XG5cdFx0dGltZXN0YW1wOiBEYXRlLm5vdygpLFxuXHRcdGxpdmU6IHRydWUsXG5cdFx0b3BkczogdXJsLFxuXHRcdG9wZHNfcXI6ICdodHRwczovL2NoYXJ0LmFwaXMuZ29vZ2xlLmNvbS9jaGFydD9jaHQ9cXImY2hzPTMwMHgzMDAmY2hsPScgKyB1cmwsXG5cdH0pXG5cbn0pO1xuXG5hcHAudXNlKCcvKicsIChyZXEsIHJlcykgPT4ge1xuXG5cdHJlcy53cml0ZUhlYWQoMjAwLCB7J0NvbnRlbnQtVHlwZSc6ICd0ZXh0L2h0bWw7IGNoYXJzZXQ9dXRmLTgnfSk7XG5cdHJlcy5jaGFyc2V0ID0gJ3V0Zi04JztcblxuXHQvL2xldCBodG1sID0gYDxtZXRhIGNoYXJzZXQ9XCJ1dGYtOFwiLz48c2NyaXB0IHNyYz1cIi9ndW4uanNcIj48c2NyaXB0IHNyYz1cIi9ndW4vbGliL3dlYnJ0Yy5qc1wiPjwvc2NyaXB0PjxzY3JpcHQ+dmFyIGd1biA9IEd1bihbXCJodHRwczovL2d1bmpzLmhlcm9rdWFwcC5jb20vZ3VuXCIsXCJodHRwOi8vbm1yLmlvOjg3NjUvZ3VuXCIsd2luZG93LmxvY2F0aW9uLm9yaWdpbiArICcvZ3VuJ10pOzwvc2NyaXB0PmA7XG5cdGxldCBodG1sID0gJyc7XG5cblx0cmVzLmVuZChgJHtodG1sfVdlbGNvbWUgdG8gbWljcm88cD7oq4vlsIcgPGEgaHJlZj1cIi9vcGRzXCI+PHNjcmlwdD5kb2N1bWVudC53cml0ZSh3aW5kb3cubG9jYXRpb24ub3JpZ2luICsgJy9vcGRzJyk8L3NjcmlwdD48L2E+IOWKoOWFpemWseiugOWZqOeahOiogumWseWFpzwvcD48cD48c2NyaXB0PmRvY3VtZW50LndyaXRlKCc8aW1nIHNyYz1cImh0dHBzOi8vY2hhcnQuYXBpcy5nb29nbGUuY29tL2NoYXJ0P2NodD1xciZjaHM9MzAweDMwMCZjaGw9JyArIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyAnL29wZHNcIi8+Jyk8L3NjcmlwdD48L3A+YClcbn0pO1xuXG5jb25zb2xlLmRlYnVnKGBzZXJ2ZXIgc2V0dXAgcmVhZHlgKTtcbmV4cG9ydCBkZWZhdWx0IGFwcFxuIl19