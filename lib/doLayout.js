"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleContext = void 0;
const layout_1 = __importDefault(require("@node-novel/layout"));
const rules_1 = __importDefault(require("@node-novel/layout-pattern/lib/rules"));
let ruleData;
function initRuleData() {
    if (ruleData == null) {
        ruleData = {
            rule_tpl: getRule('demo.lf2.cht'),
            rule_base: getRule('base-v2'),
        };
    }
    return ruleData;
}
function _my_words(ruleData) {
    let words = [];
    let arr = [];
    words = words.concat(ruleData.rule_tpl.words || []);
    arr = arr.concat(ruleData.rule_tpl.words_arr || []);
    words = words.concat(ruleData.rule_base.words || []);
    arr = arr.concat(ruleData.rule_base.words_arr || []);
    words = words.concat(ruleData.rule_tpl.words || []);
    arr = arr.concat(ruleData.rule_tpl.words_arr || []);
    words = layout_1.default._words1(arr, words);
    return layout_1.default._words2(words);
}
function getRule(id) {
    let rule = rules_1.default(id);
    return {
        ...rule,
        words_arr: [],
    };
}
function my_words(html, ruleData) {
    html = html.toString();
    let words = _my_words(ruleData);
    let ret = layout_1.default.replace_words(html, words);
    html = ret.value;
    return html;
}
function handleContext(_t_old, meta) {
    let _t = layout_1.default.toStr(_t_old);
    if (meta && meta.options && meta.options.textlayout && !meta.options.textlayout.allow_lf2) {
        _t = layout_1.default.reduceLine(_t, meta.options.textlayout || {});
    }
    _t = my_words(_t, initRuleData());
    _t = layout_1.default.textlayout(_t, {});
    _t = my_words(_t, ruleData);
    _t = layout_1.default.replace(_t, {
        words: true,
    });
    _t = layout_1.default.trim(_t);
    return _t;
}
exports.handleContext = handleContext;
exports.default = handleContext;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9MYXlvdXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkb0xheW91dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFJQSxnRUFBMkM7QUFDM0MsaUZBQTBGO0FBSTFGLElBQUksUUFHSCxDQUFDO0FBRUYsU0FBUyxZQUFZO0lBRXBCLElBQUksUUFBUSxJQUFJLElBQUksRUFDcEI7UUFDQyxRQUFRLEdBQUc7WUFDVixRQUFRLEVBQUUsT0FBTyxDQUFDLGNBQWMsQ0FBQztZQUNqQyxTQUFTLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQztTQUM3QixDQUFBO0tBQ0Q7SUFFRCxPQUFPLFFBQVEsQ0FBQztBQUNqQixDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsUUFHbEI7SUFFQSxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDZixJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFFYixLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNwRCxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUVwRCxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNyRCxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUVyRCxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNwRCxHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUVwRCxLQUFLLEdBQUcsZ0JBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRXRDLE9BQU8sZ0JBQVMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakMsQ0FBQztBQUVELFNBQVMsT0FBTyxDQUF5QixFQUFLO0lBRTdDLElBQUksSUFBSSxHQUFHLGVBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUU5QixPQUFPO1FBQ04sR0FBRyxJQUFJO1FBQ1AsU0FBUyxFQUFFLEVBQWM7S0FDekIsQ0FBQTtBQUNGLENBQUM7QUFFRCxTQUFTLFFBQVEsQ0FBQyxJQUFxQixFQUFFLFFBR3hDO0lBRUEsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUV2QixJQUFJLEtBQUssR0FBRyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUM7SUFFaEMsSUFBSSxHQUFHLEdBQUcsZ0JBQVMsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRS9DLElBQUksR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO0lBRWpCLE9BQU8sSUFBSSxDQUFBO0FBQ1osQ0FBQztBQUVELFNBQWdCLGFBQWEsQ0FBQyxNQUF1QixFQUFFLElBTXREO0lBRUEsSUFBSSxFQUFFLEdBQUcsZ0JBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFakMsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLFNBQVMsRUFDekY7UUFDQyxFQUFFLEdBQUcsZ0JBQVMsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0tBQzdEO0lBRUQsRUFBRSxHQUFHLFFBQVEsQ0FBQyxFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUNsQyxFQUFFLEdBQUcsZ0JBQVMsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2xDLEVBQUUsR0FBRyxRQUFRLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRTVCLEVBQUUsR0FBRyxnQkFBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUU7UUFDMUIsS0FBSyxFQUFFLElBQUk7S0FDWCxDQUFDLENBQUM7SUFFSCxFQUFFLEdBQUcsZ0JBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFFeEIsT0FBTyxFQUFFLENBQUM7QUFDWCxDQUFDO0FBMUJELHNDQTBCQztBQUVELGtCQUFlLGFBQWEsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMjAvMS8zMC5cbiAqL1xuXG5pbXBvcnQgbm92ZWxUZXh0IGZyb20gJ0Bub2RlLW5vdmVsL2xheW91dCc7XG5pbXBvcnQgZ2V0QnVpbGRJblJ1bGUsIHsgZ2V0QnVpbGRJblJ1bGVQYXRoIH0gZnJvbSAnQG5vZGUtbm92ZWwvbGF5b3V0LXBhdHRlcm4vbGliL3J1bGVzJztcbmltcG9ydCB7IElQYXR0ZXJuUnVsZSB9IGZyb20gJ0Bub2RlLW5vdmVsL2xheW91dC1wYXR0ZXJuL2xpYi9jb3JlL3R5cGVzJztcbmltcG9ydCB7IElSdWxlTGlzdEtleSB9IGZyb20gJ0Bub2RlLW5vdmVsL2xheW91dC1wYXR0ZXJuL2xpYi9ydWxlcy1rZXlzJztcblxubGV0IHJ1bGVEYXRhOiB7XG5cdHJ1bGVfdHBsOiBSZXR1cm5UeXBlPHR5cGVvZiBnZXRSdWxlPixcblx0cnVsZV9iYXNlOiBSZXR1cm5UeXBlPHR5cGVvZiBnZXRSdWxlPixcbn07XG5cbmZ1bmN0aW9uIGluaXRSdWxlRGF0YSgpXG57XG5cdGlmIChydWxlRGF0YSA9PSBudWxsKVxuXHR7XG5cdFx0cnVsZURhdGEgPSB7XG5cdFx0XHRydWxlX3RwbDogZ2V0UnVsZSgnZGVtby5sZjIuY2h0JyksXG5cdFx0XHRydWxlX2Jhc2U6IGdldFJ1bGUoJ2Jhc2UtdjInKSxcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcnVsZURhdGE7XG59XG5cbmZ1bmN0aW9uIF9teV93b3JkcyhydWxlRGF0YToge1xuXHRydWxlX3RwbDogUmV0dXJuVHlwZTx0eXBlb2YgZ2V0UnVsZT4sXG5cdHJ1bGVfYmFzZTogUmV0dXJuVHlwZTx0eXBlb2YgZ2V0UnVsZT4sXG59KVxue1xuXHRsZXQgd29yZHMgPSBbXTtcblx0bGV0IGFyciA9IFtdO1xuXG5cdHdvcmRzID0gd29yZHMuY29uY2F0KHJ1bGVEYXRhLnJ1bGVfdHBsLndvcmRzIHx8IFtdKTtcblx0YXJyID0gYXJyLmNvbmNhdChydWxlRGF0YS5ydWxlX3RwbC53b3Jkc19hcnIgfHwgW10pO1xuXG5cdHdvcmRzID0gd29yZHMuY29uY2F0KHJ1bGVEYXRhLnJ1bGVfYmFzZS53b3JkcyB8fCBbXSk7XG5cdGFyciA9IGFyci5jb25jYXQocnVsZURhdGEucnVsZV9iYXNlLndvcmRzX2FyciB8fCBbXSk7XG5cblx0d29yZHMgPSB3b3Jkcy5jb25jYXQocnVsZURhdGEucnVsZV90cGwud29yZHMgfHwgW10pO1xuXHRhcnIgPSBhcnIuY29uY2F0KHJ1bGVEYXRhLnJ1bGVfdHBsLndvcmRzX2FyciB8fCBbXSk7XG5cblx0d29yZHMgPSBub3ZlbFRleHQuX3dvcmRzMShhcnIsIHdvcmRzKTtcblxuXHRyZXR1cm4gbm92ZWxUZXh0Ll93b3JkczIod29yZHMpO1xufVxuXG5mdW5jdGlvbiBnZXRSdWxlPFQgZXh0ZW5kcyBJUnVsZUxpc3RLZXk+KGlkOiBUKVxue1xuXHRsZXQgcnVsZSA9IGdldEJ1aWxkSW5SdWxlKGlkKTtcblxuXHRyZXR1cm4ge1xuXHRcdC4uLnJ1bGUsXG5cdFx0d29yZHNfYXJyOiBbXSBhcyBzdHJpbmdbXSxcblx0fVxufVxuXG5mdW5jdGlvbiBteV93b3JkcyhodG1sOiBCdWZmZXIgfCBzdHJpbmcsIHJ1bGVEYXRhOiB7XG5cdHJ1bGVfdHBsOiBSZXR1cm5UeXBlPHR5cGVvZiBnZXRSdWxlPixcblx0cnVsZV9iYXNlOiBSZXR1cm5UeXBlPHR5cGVvZiBnZXRSdWxlPixcbn0pXG57XG5cdGh0bWwgPSBodG1sLnRvU3RyaW5nKCk7XG5cblx0bGV0IHdvcmRzID0gX215X3dvcmRzKHJ1bGVEYXRhKTtcblxuXHRsZXQgcmV0ID0gbm92ZWxUZXh0LnJlcGxhY2Vfd29yZHMoaHRtbCwgd29yZHMpO1xuXG5cdGh0bWwgPSByZXQudmFsdWU7XG5cblx0cmV0dXJuIGh0bWxcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUNvbnRleHQoX3Rfb2xkOiBCdWZmZXIgfCBzdHJpbmcsIG1ldGE/OiB7XG5cdG9wdGlvbnM/OiB7XG5cdFx0dGV4dGxheW91dD86IHtcblx0XHRcdGFsbG93X2xmMj86IGJvb2xlYW4sXG5cdFx0fVxuXHR9XG59KVxue1xuXHRsZXQgX3QgPSBub3ZlbFRleHQudG9TdHIoX3Rfb2xkKTtcblxuXHRpZiAobWV0YSAmJiBtZXRhLm9wdGlvbnMgJiYgbWV0YS5vcHRpb25zLnRleHRsYXlvdXQgJiYgIW1ldGEub3B0aW9ucy50ZXh0bGF5b3V0LmFsbG93X2xmMilcblx0e1xuXHRcdF90ID0gbm92ZWxUZXh0LnJlZHVjZUxpbmUoX3QsIG1ldGEub3B0aW9ucy50ZXh0bGF5b3V0IHx8IHt9KTtcblx0fVxuXG5cdF90ID0gbXlfd29yZHMoX3QsIGluaXRSdWxlRGF0YSgpKTtcblx0X3QgPSBub3ZlbFRleHQudGV4dGxheW91dChfdCwge30pO1xuXHRfdCA9IG15X3dvcmRzKF90LCBydWxlRGF0YSk7XG5cblx0X3QgPSBub3ZlbFRleHQucmVwbGFjZShfdCwge1xuXHRcdHdvcmRzOiB0cnVlLFxuXHR9KTtcblxuXHRfdCA9IG5vdmVsVGV4dC50cmltKF90KTtcblxuXHRyZXR1cm4gX3Q7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhbmRsZUNvbnRleHRcbiJdfQ==