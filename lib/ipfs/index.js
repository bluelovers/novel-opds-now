"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.putEpubFileInfo = exports.getEpubFileInfo = exports.newURL = void 0;
const index_1 = require("../util/index");
const bluebird_1 = __importDefault(require("bluebird"));
const fetch_1 = __importDefault(require("../fetch"));
const hash_sum_1 = __importDefault(require("hash-sum"));
const server = `https://calm-inlet-73656.herokuapp.com`;
function newURL(siteID, novelID) {
    return new URL(`db/file/${siteID}/${hash_sum_1.default(novelID)}`, server);
}
exports.newURL = newURL;
function getEpubFileInfo(_siteID, _novelID) {
    let { siteID, novelID } = index_1.handleArgvList(_siteID, _novelID);
    let timeout = 5 * 1000;
    return new bluebird_1.default((resolve, reject) => {
        let max = siteID.length * novelID.length;
        let i = 0;
        function _resolve(e) {
            i++;
            if (e && e.error === false) {
                return resolve(e.data);
            }
            if (i >= max) {
                return reject(e);
            }
        }
        function _reject(e) {
            i++;
            if (i >= max) {
                return reject(e);
            }
        }
        siteID.forEach(siteID => {
            novelID.forEach(novelID => {
                let url = newURL(siteID, novelID);
                fetch_1.default(url.href, {
                    timeout,
                })
                    .then(v => v.json())
                    .then(_resolve)
                    .catch(_reject);
            });
        });
    })
        .timeout(timeout + 5 * 1000);
}
exports.getEpubFileInfo = getEpubFileInfo;
function putEpubFileInfo(siteID, novelID, data) {
    let url = newURL(siteID, novelID);
    let timeout = 60 * 1000;
    let opts = {
        method: 'POST',
        headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(data),
        timeout,
    };
    return fetch_1.default(url.href, opts)
        .catch((e) => {
        if (e.status == 503) {
            return Promise.delay(5000)
                .then(e => fetch_1.default(url.href, opts));
        }
        return Promise.reject(e);
    })
        .catch(e => {
        console.error(`putEpubFileInfo`, `上傳資料時發生錯誤`);
        return Promise.reject(e);
    });
}
exports.putEpubFileInfo = putEpubFileInfo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQSx5Q0FBK0M7QUFDL0Msd0RBQWdDO0FBRWhDLHFEQUE2QjtBQUM3Qix3REFBK0I7QUFLL0IsTUFBTSxNQUFNLEdBQUcsd0NBQXdDLENBQUM7QUFFeEQsU0FBZ0IsTUFBTSxDQUFDLE1BQWMsRUFBRSxPQUFlO0lBRXJELE9BQU8sSUFBSSxHQUFHLENBQUMsV0FBVyxNQUFNLElBQUksa0JBQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ2pFLENBQUM7QUFIRCx3QkFHQztBQUVELFNBQWdCLGVBQWUsQ0FBQyxPQUEwQixFQUFFLFFBQTJCO0lBRXRGLElBQUksRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsc0JBQWMsQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFFNUQsSUFBSSxPQUFPLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQztJQUV2QixPQUFPLElBQUksa0JBQVEsQ0FBZSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUVyRCxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFDekMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRVYsU0FBUyxRQUFRLENBQUMsQ0FBQztZQUVsQixDQUFDLEVBQUUsQ0FBQztZQUVKLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLEtBQUssS0FBSyxFQUMxQjtnQkFDQyxPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUE7YUFDdEI7WUFFRCxJQUFJLENBQUMsSUFBSSxHQUFHLEVBQ1o7Z0JBQ0MsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUE7YUFDaEI7UUFDRixDQUFDO1FBRUQsU0FBUyxPQUFPLENBQUMsQ0FBQztZQUVqQixDQUFDLEVBQUUsQ0FBQztZQUNKLElBQUksQ0FBQyxJQUFJLEdBQUcsRUFDWjtnQkFDQyxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTthQUNoQjtRQUNGLENBQUM7UUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBRXZCLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBRXpCLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBSWxDLGVBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFO29CQUNmLE9BQU87aUJBQ1AsQ0FBQztxQkFDQSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7cUJBQ25CLElBQUksQ0FBQyxRQUFRLENBQUM7cUJBQ2QsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUNmO1lBQ0YsQ0FBQyxDQUFDLENBQUE7UUFFSCxDQUFDLENBQUMsQ0FBQTtJQUVILENBQUMsQ0FBQztTQUNBLE9BQU8sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUM1QjtBQUNGLENBQUM7QUF6REQsMENBeURDO0FBRUQsU0FBZ0IsZUFBZSxDQUFDLE1BQWMsRUFBRSxPQUFlLEVBQUUsSUFBa0I7SUFFbEYsSUFBSSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUVsQyxJQUFJLE9BQU8sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO0lBYXhCLElBQUksSUFBSSxHQUFnQjtRQUN2QixNQUFNLEVBQUUsTUFBTTtRQUNkLE9BQU8sRUFBRTtZQUNSLFFBQVEsRUFBRSxrQkFBa0I7WUFDNUIsY0FBYyxFQUFFLGtCQUFrQjtTQUNsQztRQUNELElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztRQUMxQixPQUFPO0tBQ1AsQ0FBQztJQUVGLE9BQU8sZUFBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO1NBQzFCLEtBQUssQ0FBQyxDQUFDLENBQVcsRUFBRSxFQUFFO1FBRXRCLElBQUksQ0FBQyxDQUFDLE1BQU0sSUFBSSxHQUFHLEVBQ25CO1lBQ0MsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztpQkFDeEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FDakM7U0FDRDtRQUVELE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN6QixDQUFDLENBQUM7U0FDRCxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDVixPQUFPLENBQUMsS0FBSyxDQUFDLGlCQUFpQixFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRTlDLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN6QixDQUFDLENBQUMsQ0FBQTtBQUNKLENBQUM7QUE1Q0QsMENBNENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXJyYXlfdW5pcXVlLCBhcnJheV91bmlxdWVfb3ZlcndyaXRlIH0gZnJvbSAnYXJyYXktaHlwZXItdW5pcXVlJztcbmltcG9ydCB7IGhhbmRsZUFyZ3ZMaXN0IH0gZnJvbSAnLi4vdXRpbC9pbmRleCc7XG5pbXBvcnQgQmx1ZWJpcmQgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IGZldGNoSVBGUyBmcm9tICdmZXRjaC1pcGZzJztcbmltcG9ydCBmZXRjaCBmcm9tICcuLi9mZXRjaCc7XG5pbXBvcnQgaGFzaFN1bSBmcm9tICdoYXNoLXN1bSc7XG5pbXBvcnQgeyBJR3VuRXB1Yk5vZGUgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBSZXF1ZXN0SW5pdCwgUmVxdWVzdEluZm8sIFJlc3BvbnNlLCBGZXRjaEVycm9yIH0gZnJvbSAnbm9kZS1mZXRjaCc7XG5cbi8vY29uc3Qgc2VydmVyID0gYGh0dHBzOi8vYXBpLWZpbGUtc2VydmVyLmVwdWIubm93LnNoL2A7XG5jb25zdCBzZXJ2ZXIgPSBgaHR0cHM6Ly9jYWxtLWlubGV0LTczNjU2Lmhlcm9rdWFwcC5jb21gO1xuXG5leHBvcnQgZnVuY3Rpb24gbmV3VVJMKHNpdGVJRDogc3RyaW5nLCBub3ZlbElEOiBzdHJpbmcpXG57XG5cdHJldHVybiBuZXcgVVJMKGBkYi9maWxlLyR7c2l0ZUlEfS8ke2hhc2hTdW0obm92ZWxJRCl9YCwgc2VydmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVwdWJGaWxlSW5mbyhfc2l0ZUlEOiBzdHJpbmcgfCBzdHJpbmdbXSwgX25vdmVsSUQ6IHN0cmluZyB8IHN0cmluZ1tdKVxue1xuXHRsZXQgeyBzaXRlSUQsIG5vdmVsSUQgfSA9IGhhbmRsZUFyZ3ZMaXN0KF9zaXRlSUQsIF9ub3ZlbElEKTtcblxuXHRsZXQgdGltZW91dCA9IDUgKiAxMDAwO1xuXG5cdHJldHVybiBuZXcgQmx1ZWJpcmQ8SUd1bkVwdWJOb2RlPigocmVzb2x2ZSwgcmVqZWN0KSA9PlxuXHR7XG5cdFx0bGV0IG1heCA9IHNpdGVJRC5sZW5ndGggKiBub3ZlbElELmxlbmd0aDtcblx0XHRsZXQgaSA9IDA7XG5cblx0XHRmdW5jdGlvbiBfcmVzb2x2ZShlKVxuXHRcdHtcblx0XHRcdGkrKztcblxuXHRcdFx0aWYgKGUgJiYgZS5lcnJvciA9PT0gZmFsc2UpXG5cdFx0XHR7XG5cdFx0XHRcdHJldHVybiByZXNvbHZlKGUuZGF0YSlcblx0XHRcdH1cblxuXHRcdFx0aWYgKGkgPj0gbWF4KVxuXHRcdFx0e1xuXHRcdFx0XHRyZXR1cm4gcmVqZWN0KGUpXG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gX3JlamVjdChlKVxuXHRcdHtcblx0XHRcdGkrKztcblx0XHRcdGlmIChpID49IG1heClcblx0XHRcdHtcblx0XHRcdFx0cmV0dXJuIHJlamVjdChlKVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHNpdGVJRC5mb3JFYWNoKHNpdGVJRCA9PlxuXHRcdHtcblx0XHRcdG5vdmVsSUQuZm9yRWFjaChub3ZlbElEID0+XG5cdFx0XHR7XG5cdFx0XHRcdGxldCB1cmwgPSBuZXdVUkwoc2l0ZUlELCBub3ZlbElEKTtcblxuXHRcdFx0XHQvL2NvbnNvbGUuZGVidWcodXJsLmhyZWYpXG5cblx0XHRcdFx0ZmV0Y2godXJsLmhyZWYsIHtcblx0XHRcdFx0XHR0aW1lb3V0LFxuXHRcdFx0XHR9KVxuXHRcdFx0XHRcdC50aGVuKHYgPT4gdi5qc29uKCkpXG5cdFx0XHRcdFx0LnRoZW4oX3Jlc29sdmUpXG5cdFx0XHRcdFx0LmNhdGNoKF9yZWplY3QpXG5cdFx0XHRcdDtcblx0XHRcdH0pXG5cblx0XHR9KVxuXG5cdH0pXG5cdFx0LnRpbWVvdXQodGltZW91dCArIDUgKiAxMDAwKVxuXHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwdXRFcHViRmlsZUluZm8oc2l0ZUlEOiBzdHJpbmcsIG5vdmVsSUQ6IHN0cmluZywgZGF0YTogSUd1bkVwdWJOb2RlKVxue1xuXHRsZXQgdXJsID0gbmV3VVJMKHNpdGVJRCwgbm92ZWxJRCk7XG5cblx0bGV0IHRpbWVvdXQgPSA2MCAqIDEwMDA7XG5cbi8vXHRsZXQgYm9keSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbi8vXG4vL1x0T2JqZWN0LmVudHJpZXMoZGF0YSlcbi8vXHRcdC8vIEB0cy1pZ25vcmVcbi8vXHRcdC5mb3JFYWNoKChbaywgdl0pID0+IGJvZHkuc2V0KGssIHYpKVxuLy9cdDtcblxuXHQvL3JldHVybiBCbHVlYmlyZC5yZXNvbHZlKGJvZHkpO1xuXG5cdC8vY29uc29sZS5kZWJ1Zyh1cmwuaHJlZik7XG5cblx0bGV0IG9wdHM6IFJlcXVlc3RJbml0ID0ge1xuXHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdGhlYWRlcnM6IHtcblx0XHRcdCdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXG5cdFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG5cdFx0fSxcblx0XHRib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcblx0XHR0aW1lb3V0LFxuXHR9O1xuXG5cdHJldHVybiBmZXRjaCh1cmwuaHJlZiwgb3B0cylcblx0XHQuY2F0Y2goKGU6IFJlc3BvbnNlKSA9PiB7XG5cblx0XHRcdGlmIChlLnN0YXR1cyA9PSA1MDMpXG5cdFx0XHR7XG5cdFx0XHRcdHJldHVybiBQcm9taXNlLmRlbGF5KDUwMDApXG5cdFx0XHRcdFx0LnRoZW4oZSA9PiBmZXRjaCh1cmwuaHJlZiwgb3B0cykpXG5cdFx0XHRcdDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGUpXG5cdFx0fSlcblx0XHQuY2F0Y2goZSA9PiB7XG5cdFx0XHRjb25zb2xlLmVycm9yKGBwdXRFcHViRmlsZUluZm9gLCBg5LiK5YKz6LOH5paZ5pmC55m855Sf6Yyv6KqkYCk7XG5cblx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlKVxuXHRcdH0pXG59XG4iXX0=