"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../util/index");
const index_2 = require("../ipfs/index");
const bluebird_1 = require("bluebird");
const checkData_1 = __importDefault(require("../gun/checkData"));
const fetch_ipfs_1 = __importDefault(require("fetch-ipfs"));
const use_ipfs_1 = __importDefault(require("use-ipfs"));
const logger_1 = __importDefault(require("debug-color2/logger"));
const to_ipfs_url_1 = require("to-ipfs-url");
function getIPFSEpubFile(_siteID, _novelID, options) {
    let { query = {} } = options || {};
    let { siteID, novelID } = index_1.handleArgvList(_siteID, _novelID);
    return index_2.getEpubFileInfo(siteID, novelID)
        .catch(bluebird_1.TimeoutError, e => null)
        .then(async (data) => {
        if (checkData_1.default(data)) {
            let { ipfs } = await use_ipfs_1.default();
            let buf = await fetch_ipfs_1.default(data.href, ipfs)
                .catch(e => null);
            if (buf && buf.length) {
                data.base64 = buf.toString('base64');
                let { base64, filename, exists, timestamp, href } = data;
                let isGun = false;
                if (query.debug || query.force) {
                }
                else if ((Date.now() - data.timestamp) < 86400 * 1000) {
                    isGun = true;
                }
                return {
                    base64,
                    filename,
                    exists,
                    timestamp,
                    isGun,
                    href,
                };
            }
        }
        return null;
    })
        .catch(e => null);
}
exports.getIPFSEpubFile = getIPFSEpubFile;
async function putIPFSEpubFile(_siteID, _novelID, gunData, options) {
    ({ siteID: _siteID, novelID: _novelID } = index_1.handleArgvList(_siteID, _novelID));
    let siteID = _siteID[0];
    let novelID = _novelID[0];
    let { base64, ...data } = gunData;
    let content = Buffer.from(base64, 'base64');
    let { ipfs } = await use_ipfs_1.default();
    if (!data.href) {
        let cid;
        logger_1.default.dir(data);
        logger_1.default.debug(`add to IPFS`);
        for await (const result of ipfs.add({
            path: data.filename,
            content,
        }, {
            pin: false,
        })) {
            logger_1.default.debug(result);
            logger_1.default.debug(cid = result.cid.toString());
        }
        data.href = to_ipfs_url_1.toLink(cid, data.filename);
    }
    logger_1.default.success(data.href);
    delete data.base64;
    await index_2.putEpubFileInfo(siteID, novelID, data)
        .tap(async (v) => logger_1.default.debug(await v.json()))
        .tapCatch(v => logger_1.default.error(v));
}
exports.putIPFSEpubFile = putIPFSEpubFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXBmcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImlwZnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx5Q0FBK0M7QUFDL0MseUNBQWlFO0FBQ2pFLHVDQUF3QztBQUN4QyxpRUFBNEM7QUFDNUMsNERBQW1DO0FBQ25DLHdEQUErQjtBQUUvQixpRUFBMEM7QUFDMUMsNkNBQXFDO0FBRXJDLFNBQWdCLGVBQWUsQ0FBQyxPQUEwQixFQUFFLFFBQTJCLEVBQUUsT0FLeEY7SUFFQSxJQUFJLEVBQUUsS0FBSyxHQUFHLEVBQUUsRUFBRSxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFFbkMsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxzQkFBYyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUU1RCxPQUFPLHVCQUFlLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQztTQUNyQyxLQUFLLENBQUMsdUJBQVksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztTQUM5QixJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1FBRXBCLElBQUksbUJBQVksQ0FBQyxJQUFJLENBQUMsRUFDdEI7WUFDQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxrQkFBTyxFQUFFLENBQUM7WUFFL0IsSUFBSSxHQUFHLEdBQUcsTUFBTSxvQkFBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO2lCQUN4QyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FDakI7WUFFRCxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxFQUNyQjtnQkFDQyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBRXJDLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUV6RCxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUM7Z0JBRWxCLElBQUksS0FBSyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxFQUM5QjtpQkFFQztxQkFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxFQUNyRDtvQkFDQyxLQUFLLEdBQUcsSUFBSSxDQUFDO2lCQUNiO2dCQUVELE9BQU87b0JBQ04sTUFBTTtvQkFDTixRQUFRO29CQUNSLE1BQU07b0JBQ04sU0FBUztvQkFDVCxLQUFLO29CQUNMLElBQUk7aUJBQ1ksQ0FBQTthQUNqQjtTQUNEO1FBRUQsT0FBTyxJQUFJLENBQUE7SUFDWixDQUFDLENBQUM7U0FDRCxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FDaEI7QUFDSCxDQUFDO0FBdkRELDBDQXVEQztBQUVNLEtBQUssVUFBVSxlQUFlLENBQUMsT0FBMEIsRUFDL0QsUUFBMkIsRUFDM0IsT0FBcUIsRUFDckIsT0FLQztJQUdELENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsR0FBRyxzQkFBYyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBRTdFLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4QixJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUIsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQztJQUVsQyxJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUU1QyxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxrQkFBTyxFQUFFLENBQUM7SUFFL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQ2Q7UUFDQyxJQUFJLEdBQVcsQ0FBQztRQUVoQixnQkFBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVsQixnQkFBTyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUU3QixJQUFJLEtBQUssRUFBRSxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ25DLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUTtZQUNuQixPQUFPO1NBQ1AsRUFBRTtZQUNGLEdBQUcsRUFBRSxLQUFLO1NBQ1YsQ0FBQyxFQUNGO1lBQ0MsZ0JBQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDdEIsZ0JBQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQTtTQUMxQztRQUVELElBQUksQ0FBQyxJQUFJLEdBQUcsb0JBQU0sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3ZDO0lBRUQsZ0JBQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRTNCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUVuQixNQUFNLHVCQUFlLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxJQUFXLENBQUM7U0FDakQsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLGdCQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7U0FDL0MsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsZ0JBQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUNsQyxDQUFDO0FBbkRELDBDQW1EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhhbmRsZUFyZ3ZMaXN0IH0gZnJvbSAnLi4vdXRpbC9pbmRleCc7XG5pbXBvcnQgeyBnZXRFcHViRmlsZUluZm8sIHB1dEVwdWJGaWxlSW5mbyB9IGZyb20gJy4uL2lwZnMvaW5kZXgnO1xuaW1wb3J0IHsgVGltZW91dEVycm9yIH0gZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IGNoZWNrR3VuRGF0YSBmcm9tICcuLi9ndW4vY2hlY2tEYXRhJztcbmltcG9ydCBmZXRjaElQRlMgZnJvbSAnZmV0Y2gtaXBmcyc7XG5pbXBvcnQgdXNlSVBGUyBmcm9tICd1c2UtaXBmcyc7XG5pbXBvcnQgeyBJR3VuRXB1YkRhdGEsIElHdW5FcHViTm9kZSB9IGZyb20gJy4uL3R5cGVzJztcbmltcG9ydCBjb25zb2xlIGZyb20gJ2RlYnVnLWNvbG9yMi9sb2dnZXInO1xuaW1wb3J0IHsgdG9MaW5rIH0gZnJvbSAndG8taXBmcy11cmwnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SVBGU0VwdWJGaWxlKF9zaXRlSUQ6IHN0cmluZyB8IHN0cmluZ1tdLCBfbm92ZWxJRDogc3RyaW5nIHwgc3RyaW5nW10sIG9wdGlvbnM6IHtcblx0cXVlcnk6IHtcblx0XHRkZWJ1Zz86IGJvb2xlYW4sXG5cdFx0Zm9yY2U/OiBib29sZWFuLFxuXHR9LFxufSlcbntcblx0bGV0IHsgcXVlcnkgPSB7fSB9ID0gb3B0aW9ucyB8fCB7fTtcblxuXHRsZXQgeyBzaXRlSUQsIG5vdmVsSUQgfSA9IGhhbmRsZUFyZ3ZMaXN0KF9zaXRlSUQsIF9ub3ZlbElEKTtcblxuXHRyZXR1cm4gZ2V0RXB1YkZpbGVJbmZvKHNpdGVJRCwgbm92ZWxJRClcblx0XHQuY2F0Y2goVGltZW91dEVycm9yLCBlID0+IG51bGwpXG5cdFx0LnRoZW4oYXN5bmMgKGRhdGEpID0+XG5cdFx0e1xuXHRcdFx0aWYgKGNoZWNrR3VuRGF0YShkYXRhKSlcblx0XHRcdHtcblx0XHRcdFx0bGV0IHsgaXBmcyB9ID0gYXdhaXQgdXNlSVBGUygpO1xuXG5cdFx0XHRcdGxldCBidWYgPSBhd2FpdCBmZXRjaElQRlMoZGF0YS5ocmVmLCBpcGZzKVxuXHRcdFx0XHRcdC5jYXRjaChlID0+IG51bGwpXG5cdFx0XHRcdDtcblxuXHRcdFx0XHRpZiAoYnVmICYmIGJ1Zi5sZW5ndGgpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRkYXRhLmJhc2U2NCA9IGJ1Zi50b1N0cmluZygnYmFzZTY0Jyk7XG5cblx0XHRcdFx0XHRsZXQgeyBiYXNlNjQsIGZpbGVuYW1lLCBleGlzdHMsIHRpbWVzdGFtcCwgaHJlZiB9ID0gZGF0YTtcblxuXHRcdFx0XHRcdGxldCBpc0d1biA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKHF1ZXJ5LmRlYnVnIHx8IHF1ZXJ5LmZvcmNlKVxuXHRcdFx0XHRcdHtcblxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIGlmICgoRGF0ZS5ub3coKSAtIGRhdGEudGltZXN0YW1wKSA8IDg2NDAwICogMTAwMClcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRpc0d1biA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdGJhc2U2NCxcblx0XHRcdFx0XHRcdGZpbGVuYW1lLFxuXHRcdFx0XHRcdFx0ZXhpc3RzLFxuXHRcdFx0XHRcdFx0dGltZXN0YW1wLFxuXHRcdFx0XHRcdFx0aXNHdW4sXG5cdFx0XHRcdFx0XHRocmVmLFxuXHRcdFx0XHRcdH0gYXMgSUd1bkVwdWJEYXRhXG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG51bGxcblx0XHR9KVxuXHRcdC5jYXRjaChlID0+IG51bGwpXG5cdFx0O1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHV0SVBGU0VwdWJGaWxlKF9zaXRlSUQ6IHN0cmluZyB8IHN0cmluZ1tdLFxuXHRfbm92ZWxJRDogc3RyaW5nIHwgc3RyaW5nW10sXG5cdGd1bkRhdGE6IElHdW5FcHViTm9kZSxcblx0b3B0aW9ucz86IHtcblx0XHRxdWVyeT86IHtcblx0XHRcdGRlYnVnPzogYm9vbGVhbixcblx0XHRcdGZvcmNlPzogYm9vbGVhbixcblx0XHR9LFxuXHR9LFxuKVxue1xuXHQoeyBzaXRlSUQ6IF9zaXRlSUQsIG5vdmVsSUQ6IF9ub3ZlbElEIH0gPSBoYW5kbGVBcmd2TGlzdChfc2l0ZUlELCBfbm92ZWxJRCkpO1xuXG5cdGxldCBzaXRlSUQgPSBfc2l0ZUlEWzBdO1xuXHRsZXQgbm92ZWxJRCA9IF9ub3ZlbElEWzBdO1xuXG5cdGxldCB7IGJhc2U2NCwgLi4uZGF0YSB9ID0gZ3VuRGF0YTtcblxuXHRsZXQgY29udGVudCA9IEJ1ZmZlci5mcm9tKGJhc2U2NCwgJ2Jhc2U2NCcpO1xuXG5cdGxldCB7IGlwZnMgfSA9IGF3YWl0IHVzZUlQRlMoKTtcblxuXHRpZiAoIWRhdGEuaHJlZilcblx0e1xuXHRcdGxldCBjaWQ6IHN0cmluZztcblxuXHRcdGNvbnNvbGUuZGlyKGRhdGEpO1xuXG5cdFx0Y29uc29sZS5kZWJ1ZyhgYWRkIHRvIElQRlNgKTtcblxuXHRcdGZvciBhd2FpdCAoY29uc3QgcmVzdWx0IG9mIGlwZnMuYWRkKHtcblx0XHRcdHBhdGg6IGRhdGEuZmlsZW5hbWUsXG5cdFx0XHRjb250ZW50LFxuXHRcdH0sIHtcblx0XHRcdHBpbjogZmFsc2UsXG5cdFx0fSkpXG5cdFx0e1xuXHRcdFx0Y29uc29sZS5kZWJ1ZyhyZXN1bHQpO1xuXHRcdFx0Y29uc29sZS5kZWJ1ZyhjaWQgPSByZXN1bHQuY2lkLnRvU3RyaW5nKCkpXG5cdFx0fVxuXG5cdFx0ZGF0YS5ocmVmID0gdG9MaW5rKGNpZCwgZGF0YS5maWxlbmFtZSk7XG5cdH1cblxuXHRjb25zb2xlLnN1Y2Nlc3MoZGF0YS5ocmVmKTtcblx0Ly8gQHRzLWlnbm9yZVxuXHRkZWxldGUgZGF0YS5iYXNlNjQ7XG5cblx0YXdhaXQgcHV0RXB1YkZpbGVJbmZvKHNpdGVJRCwgbm92ZWxJRCwgZGF0YSBhcyBhbnkpXG5cdFx0LnRhcChhc3luYyAodikgPT4gY29uc29sZS5kZWJ1Zyhhd2FpdCB2Lmpzb24oKSkpXG5cdFx0LnRhcENhdGNoKHYgPT4gY29uc29sZS5lcnJvcih2KSlcbn1cbiJdfQ==