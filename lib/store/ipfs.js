"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("../util/index");
const index_2 = require("../ipfs/index");
const bluebird_1 = require("bluebird");
const checkData_1 = __importDefault(require("../gun/checkData"));
const fetch_ipfs_1 = __importDefault(require("fetch-ipfs"));
const use_ipfs_1 = __importDefault(require("use-ipfs"));
const logger_1 = __importDefault(require("debug-color2/logger"));
const to_ipfs_url_1 = require("to-ipfs-url");
function getIPFSEpubFile(_siteID, _novelID, options) {
    let { query = {} } = options || {};
    let { siteID, novelID } = index_1.handleArgvList(_siteID, _novelID);
    return index_2.getEpubFileInfo(siteID, novelID)
        .catch(bluebird_1.TimeoutError, e => null)
        .then(async (data) => {
        if (checkData_1.default(data)) {
            let { ipfs } = await use_ipfs_1.default();
            let buf = await fetch_ipfs_1.default(data.href, ipfs)
                .catch(e => null);
            if (buf && buf.length) {
                data.base64 = buf.toString('base64');
                let { base64, filename, exists, timestamp, href } = data;
                let isGun = false;
                if (query.debug || query.force) {
                }
                else if ((Date.now() - data.timestamp) < 86400 * 1000) {
                    isGun = true;
                }
                return {
                    base64,
                    filename,
                    exists,
                    timestamp,
                    isGun,
                    href,
                };
            }
        }
        return null;
    })
        .catch(e => null);
}
exports.getIPFSEpubFile = getIPFSEpubFile;
async function putIPFSEpubFile(_siteID, _novelID, gunData, options) {
    ({ siteID: _siteID, novelID: _novelID } = index_1.handleArgvList(_siteID, _novelID));
    let siteID = _siteID[0];
    let novelID = _novelID[0];
    let { base64, ...data } = gunData;
    let content = Buffer.from(base64, 'base64');
    let { ipfs } = await use_ipfs_1.default();
    if (!data.href) {
        let cid;
        logger_1.default.dir(data);
        logger_1.default.debug(`add to IPFS`);
        for await (const result of ipfs.add({
            path: data.filename,
            content,
            pin: false,
        })) {
            logger_1.default.debug(result);
            logger_1.default.debug(cid = result.cid.toString());
        }
        data.href = to_ipfs_url_1.toLink(cid, data.filename);
    }
    logger_1.default.success(data.href);
    delete data.base64;
    await index_2.putEpubFileInfo(siteID, novelID, data)
        .tap(async (v) => logger_1.default.debug(await v.json()))
        .tapCatch(v => logger_1.default.error(v));
}
exports.putIPFSEpubFile = putIPFSEpubFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXBmcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImlwZnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx5Q0FBK0M7QUFDL0MseUNBQWlFO0FBQ2pFLHVDQUF3QztBQUN4QyxpRUFBNEM7QUFDNUMsNERBQW1DO0FBQ25DLHdEQUErQjtBQUUvQixpRUFBMEM7QUFDMUMsNkNBQXFDO0FBRXJDLFNBQWdCLGVBQWUsQ0FBQyxPQUEwQixFQUFFLFFBQTJCLEVBQUUsT0FLeEY7SUFFQSxJQUFJLEVBQUUsS0FBSyxHQUFHLEVBQUUsRUFBRSxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFFbkMsSUFBSSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxzQkFBYyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUU1RCxPQUFPLHVCQUFlLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQztTQUNyQyxLQUFLLENBQUMsdUJBQVksRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQztTQUM5QixJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1FBRXBCLElBQUksbUJBQVksQ0FBQyxJQUFJLENBQUMsRUFDdEI7WUFDQyxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxrQkFBTyxFQUFFLENBQUM7WUFFL0IsSUFBSSxHQUFHLEdBQUcsTUFBTSxvQkFBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO2lCQUN4QyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FDakI7WUFFRCxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxFQUNyQjtnQkFDQyxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBRXJDLElBQUksRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO2dCQUV6RCxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUM7Z0JBRWxCLElBQUksS0FBSyxDQUFDLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxFQUM5QjtpQkFFQztxQkFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFLLEdBQUcsSUFBSSxFQUNyRDtvQkFDQyxLQUFLLEdBQUcsSUFBSSxDQUFDO2lCQUNiO2dCQUVELE9BQU87b0JBQ04sTUFBTTtvQkFDTixRQUFRO29CQUNSLE1BQU07b0JBQ04sU0FBUztvQkFDVCxLQUFLO29CQUNMLElBQUk7aUJBQ1ksQ0FBQTthQUNqQjtTQUNEO1FBRUQsT0FBTyxJQUFJLENBQUE7SUFDWixDQUFDLENBQUM7U0FDRCxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FDaEI7QUFDSCxDQUFDO0FBdkRELDBDQXVEQztBQUVNLEtBQUssVUFBVSxlQUFlLENBQUMsT0FBMEIsRUFDL0QsUUFBMkIsRUFDM0IsT0FBcUIsRUFDckIsT0FLQztJQUdELENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsR0FBRyxzQkFBYyxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBRTdFLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4QixJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFMUIsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQztJQUVsQyxJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUU1QyxJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxrQkFBTyxFQUFFLENBQUM7SUFFL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQ2Q7UUFDQyxJQUFJLEdBQVcsQ0FBQztRQUVoQixnQkFBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVsQixnQkFBTyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUU3QixJQUFJLEtBQUssRUFBRSxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDO1lBQ25DLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUTtZQUNuQixPQUFPO1lBQ1AsR0FBRyxFQUFFLEtBQUs7U0FDVixDQUFDLEVBQ0Y7WUFDQyxnQkFBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0QixnQkFBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFBO1NBQzFDO1FBRUQsSUFBSSxDQUFDLElBQUksR0FBRyxvQkFBTSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDdkM7SUFFRCxnQkFBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFM0IsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBRW5CLE1BQU0sdUJBQWUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLElBQVcsQ0FBQztTQUNqRCxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsZ0JBQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztTQUMvQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxnQkFBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2xDLENBQUM7QUFsREQsMENBa0RDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFuZGxlQXJndkxpc3QgfSBmcm9tICcuLi91dGlsL2luZGV4JztcbmltcG9ydCB7IGdldEVwdWJGaWxlSW5mbywgcHV0RXB1YkZpbGVJbmZvIH0gZnJvbSAnLi4vaXBmcy9pbmRleCc7XG5pbXBvcnQgeyBUaW1lb3V0RXJyb3IgfSBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgY2hlY2tHdW5EYXRhIGZyb20gJy4uL2d1bi9jaGVja0RhdGEnO1xuaW1wb3J0IGZldGNoSVBGUyBmcm9tICdmZXRjaC1pcGZzJztcbmltcG9ydCB1c2VJUEZTIGZyb20gJ3VzZS1pcGZzJztcbmltcG9ydCB7IElHdW5FcHViRGF0YSwgSUd1bkVwdWJOb2RlIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IGNvbnNvbGUgZnJvbSAnZGVidWctY29sb3IyL2xvZ2dlcic7XG5pbXBvcnQgeyB0b0xpbmsgfSBmcm9tICd0by1pcGZzLXVybCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJUEZTRXB1YkZpbGUoX3NpdGVJRDogc3RyaW5nIHwgc3RyaW5nW10sIF9ub3ZlbElEOiBzdHJpbmcgfCBzdHJpbmdbXSwgb3B0aW9uczoge1xuXHRxdWVyeToge1xuXHRcdGRlYnVnPzogYm9vbGVhbixcblx0XHRmb3JjZT86IGJvb2xlYW4sXG5cdH0sXG59KVxue1xuXHRsZXQgeyBxdWVyeSA9IHt9IH0gPSBvcHRpb25zIHx8IHt9O1xuXG5cdGxldCB7IHNpdGVJRCwgbm92ZWxJRCB9ID0gaGFuZGxlQXJndkxpc3QoX3NpdGVJRCwgX25vdmVsSUQpO1xuXG5cdHJldHVybiBnZXRFcHViRmlsZUluZm8oc2l0ZUlELCBub3ZlbElEKVxuXHRcdC5jYXRjaChUaW1lb3V0RXJyb3IsIGUgPT4gbnVsbClcblx0XHQudGhlbihhc3luYyAoZGF0YSkgPT5cblx0XHR7XG5cdFx0XHRpZiAoY2hlY2tHdW5EYXRhKGRhdGEpKVxuXHRcdFx0e1xuXHRcdFx0XHRsZXQgeyBpcGZzIH0gPSBhd2FpdCB1c2VJUEZTKCk7XG5cblx0XHRcdFx0bGV0IGJ1ZiA9IGF3YWl0IGZldGNoSVBGUyhkYXRhLmhyZWYsIGlwZnMpXG5cdFx0XHRcdFx0LmNhdGNoKGUgPT4gbnVsbClcblx0XHRcdFx0O1xuXG5cdFx0XHRcdGlmIChidWYgJiYgYnVmLmxlbmd0aClcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGRhdGEuYmFzZTY0ID0gYnVmLnRvU3RyaW5nKCdiYXNlNjQnKTtcblxuXHRcdFx0XHRcdGxldCB7IGJhc2U2NCwgZmlsZW5hbWUsIGV4aXN0cywgdGltZXN0YW1wLCBocmVmIH0gPSBkYXRhO1xuXG5cdFx0XHRcdFx0bGV0IGlzR3VuID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAocXVlcnkuZGVidWcgfHwgcXVlcnkuZm9yY2UpXG5cdFx0XHRcdFx0e1xuXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsc2UgaWYgKChEYXRlLm5vdygpIC0gZGF0YS50aW1lc3RhbXApIDwgODY0MDAgKiAxMDAwKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGlzR3VuID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0YmFzZTY0LFxuXHRcdFx0XHRcdFx0ZmlsZW5hbWUsXG5cdFx0XHRcdFx0XHRleGlzdHMsXG5cdFx0XHRcdFx0XHR0aW1lc3RhbXAsXG5cdFx0XHRcdFx0XHRpc0d1bixcblx0XHRcdFx0XHRcdGhyZWYsXG5cdFx0XHRcdFx0fSBhcyBJR3VuRXB1YkRhdGFcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbnVsbFxuXHRcdH0pXG5cdFx0LmNhdGNoKGUgPT4gbnVsbClcblx0XHQ7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwdXRJUEZTRXB1YkZpbGUoX3NpdGVJRDogc3RyaW5nIHwgc3RyaW5nW10sXG5cdF9ub3ZlbElEOiBzdHJpbmcgfCBzdHJpbmdbXSxcblx0Z3VuRGF0YTogSUd1bkVwdWJOb2RlLFxuXHRvcHRpb25zPzoge1xuXHRcdHF1ZXJ5Pzoge1xuXHRcdFx0ZGVidWc/OiBib29sZWFuLFxuXHRcdFx0Zm9yY2U/OiBib29sZWFuLFxuXHRcdH0sXG5cdH0sXG4pXG57XG5cdCh7IHNpdGVJRDogX3NpdGVJRCwgbm92ZWxJRDogX25vdmVsSUQgfSA9IGhhbmRsZUFyZ3ZMaXN0KF9zaXRlSUQsIF9ub3ZlbElEKSk7XG5cblx0bGV0IHNpdGVJRCA9IF9zaXRlSURbMF07XG5cdGxldCBub3ZlbElEID0gX25vdmVsSURbMF07XG5cblx0bGV0IHsgYmFzZTY0LCAuLi5kYXRhIH0gPSBndW5EYXRhO1xuXG5cdGxldCBjb250ZW50ID0gQnVmZmVyLmZyb20oYmFzZTY0LCAnYmFzZTY0Jyk7XG5cblx0bGV0IHsgaXBmcyB9ID0gYXdhaXQgdXNlSVBGUygpO1xuXG5cdGlmICghZGF0YS5ocmVmKVxuXHR7XG5cdFx0bGV0IGNpZDogc3RyaW5nO1xuXG5cdFx0Y29uc29sZS5kaXIoZGF0YSk7XG5cblx0XHRjb25zb2xlLmRlYnVnKGBhZGQgdG8gSVBGU2ApO1xuXG5cdFx0Zm9yIGF3YWl0IChjb25zdCByZXN1bHQgb2YgaXBmcy5hZGQoe1xuXHRcdFx0cGF0aDogZGF0YS5maWxlbmFtZSxcblx0XHRcdGNvbnRlbnQsXG5cdFx0XHRwaW46IGZhbHNlLFxuXHRcdH0pKVxuXHRcdHtcblx0XHRcdGNvbnNvbGUuZGVidWcocmVzdWx0KTtcblx0XHRcdGNvbnNvbGUuZGVidWcoY2lkID0gcmVzdWx0LmNpZC50b1N0cmluZygpKVxuXHRcdH1cblxuXHRcdGRhdGEuaHJlZiA9IHRvTGluayhjaWQsIGRhdGEuZmlsZW5hbWUpO1xuXHR9XG5cblx0Y29uc29sZS5zdWNjZXNzKGRhdGEuaHJlZik7XG5cdC8vIEB0cy1pZ25vcmVcblx0ZGVsZXRlIGRhdGEuYmFzZTY0O1xuXG5cdGF3YWl0IHB1dEVwdWJGaWxlSW5mbyhzaXRlSUQsIG5vdmVsSUQsIGRhdGEgYXMgYW55KVxuXHRcdC50YXAoYXN5bmMgKHYpID0+IGNvbnNvbGUuZGVidWcoYXdhaXQgdi5qc29uKCkpKVxuXHRcdC50YXBDYXRjaCh2ID0+IGNvbnNvbGUuZXJyb3IodikpXG59XG4iXX0=