"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const setup_1 = __importDefault(require("../../server/gun/setup"));
const bluebird_1 = __importDefault(require("bluebird"));
const array_hyper_unique_1 = require("array-hyper-unique");
function makeArrayEntrys(siteID, novel_id) {
    if (!Array.isArray(siteID)) {
        siteID = [siteID];
    }
    if (!Array.isArray(novel_id)) {
        novel_id = [novel_id];
    }
    siteID = array_hyper_unique_1.array_unique_overwrite(siteID.map(v => String(v)));
    novel_id = array_hyper_unique_1.array_unique_overwrite(novel_id.map(v => String(v)));
    return siteID
        .reduce((a, siteID) => {
        novel_id.forEach(novel_id => {
            a.push([siteID, novel_id]);
        });
        return a;
    }, []);
}
exports.makeArrayEntrys = makeArrayEntrys;
function allGunEpubFile(siteID, novel_id) {
    if (!Array.isArray(siteID)) {
        siteID = [siteID];
    }
    if (!Array.isArray(novel_id)) {
        novel_id = [novel_id];
    }
    siteID = array_hyper_unique_1.array_unique_overwrite(siteID.map(v => String(v)));
    novel_id = array_hyper_unique_1.array_unique_overwrite(novel_id.map(v => String(v)));
    let gun = setup_1.default();
    return siteID
        .reduce((a, siteID) => {
        novel_id.forEach(novel_id => {
            a.push(gun.get('epub-file').get(siteID).get(novel_id));
        });
        return a;
    }, []);
}
exports.allGunEpubFile = allGunEpubFile;
function promiseGunEpubFile(siteID, novel_id) {
    return allGunEpubFile(siteID, novel_id).map(node => node.then());
}
exports.promiseGunEpubFile = promiseGunEpubFile;
function raceGunEpubFile(siteID, novel_id) {
    return bluebird_1.default.race(promiseGunEpubFile(siteID, novel_id));
}
exports.raceGunEpubFile = raceGunEpubFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXB1YkZpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJlcHViRmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLG1FQUE0QztBQUM1Qyx3REFBZ0M7QUFDaEMsMkRBQTREO0FBSzVELFNBQWdCLGVBQWUsQ0FBQyxNQUErQixFQUFFLFFBQTBDO0lBRTFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUMxQjtRQUNDLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ2xCO0lBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQzVCO1FBQ0MsUUFBUSxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDdEI7SUFFRCxNQUFNLEdBQUcsMkNBQXNCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDNUQsUUFBUSxHQUFHLDJDQUFzQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWhFLE9BQU8sTUFBTTtTQUNYLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUdwQixRQUFxQixDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUV6QyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUE7UUFDM0IsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLENBQUMsQ0FBQztJQUNWLENBQUMsRUFBRSxFQUF3QixDQUFDLENBQUE7QUFDOUIsQ0FBQztBQXpCRCwwQ0F5QkM7QUFFRCxTQUFnQixjQUFjLENBQUMsTUFBK0IsRUFBRSxRQUEwQztJQUV6RyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFDMUI7UUFDQyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUNsQjtJQUNELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUM1QjtRQUNDLFFBQVEsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3RCO0lBRUQsTUFBTSxHQUFHLDJDQUFzQixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVELFFBQVEsR0FBRywyQ0FBc0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVoRSxJQUFJLEdBQUcsR0FBRyxlQUFNLEVBQUUsQ0FBQztJQUVuQixPQUFPLE1BQU07U0FDWCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFHckIsUUFBcUIsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFLekMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUN2RCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxDQUFDO0lBQ1YsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0FBQ1AsQ0FBQztBQTlCRCx3Q0E4QkM7QUFFRCxTQUFnQixrQkFBa0IsQ0FBSSxNQUF5QixFQUFFLFFBQTJCO0lBRTNGLE9BQU8sY0FBYyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFnQixDQUFDLENBQUE7QUFDL0UsQ0FBQztBQUhELGdEQUdDO0FBRUQsU0FBZ0IsZUFBZSxDQUFDLE1BQXlCLEVBQUUsUUFBMkI7SUFFckYsT0FBTyxrQkFBUSxDQUFDLElBQUksQ0FBZSxrQkFBa0IsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FFdkU7QUFDRixDQUFDO0FBTEQsMENBS0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdXNlR3VuIGZyb20gJy4uLy4uL3NlcnZlci9ndW4vc2V0dXAnO1xuaW1wb3J0IEJsdWViaXJkIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IGFycmF5X3VuaXF1ZV9vdmVyd3JpdGUgfSBmcm9tICdhcnJheS1oeXBlci11bmlxdWUnO1xuaW1wb3J0IHsgSUd1bkVwdWJOb2RlIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IEd1biBmcm9tICdndW4nO1xuaW1wb3J0IHsgSVRTVmFsdWVPckFycmF5IH0gZnJvbSAndHMtdHlwZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlQXJyYXlFbnRyeXMoc2l0ZUlEOiBJVFNWYWx1ZU9yQXJyYXk8c3RyaW5nPiwgbm92ZWxfaWQ6IElUU1ZhbHVlT3JBcnJheTxzdHJpbmcgfCBudW1iZXI+KVxue1xuXHRpZiAoIUFycmF5LmlzQXJyYXkoc2l0ZUlEKSlcblx0e1xuXHRcdHNpdGVJRCA9IFtzaXRlSURdO1xuXHR9XG5cdGlmICghQXJyYXkuaXNBcnJheShub3ZlbF9pZCkpXG5cdHtcblx0XHRub3ZlbF9pZCA9IFtub3ZlbF9pZF07XG5cdH1cblxuXHRzaXRlSUQgPSBhcnJheV91bmlxdWVfb3ZlcndyaXRlKHNpdGVJRC5tYXAodiA9PiBTdHJpbmcodikpKTtcblx0bm92ZWxfaWQgPSBhcnJheV91bmlxdWVfb3ZlcndyaXRlKG5vdmVsX2lkLm1hcCh2ID0+IFN0cmluZyh2KSkpO1xuXG5cdHJldHVybiBzaXRlSURcblx0XHQucmVkdWNlKChhLCBzaXRlSUQpID0+IHtcblxuXG5cdFx0XHQobm92ZWxfaWQgYXMgc3RyaW5nW10pLmZvckVhY2gobm92ZWxfaWQgPT4ge1xuXG5cdFx0XHRcdGEucHVzaChbc2l0ZUlELCBub3ZlbF9pZF0pXG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIGE7XG5cdFx0fSwgW10gYXMgW3N0cmluZywgc3RyaW5nXVtdKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWxsR3VuRXB1YkZpbGUoc2l0ZUlEOiBJVFNWYWx1ZU9yQXJyYXk8c3RyaW5nPiwgbm92ZWxfaWQ6IElUU1ZhbHVlT3JBcnJheTxzdHJpbmcgfCBudW1iZXI+KTogUmV0dXJuVHlwZTx0eXBlb2YgR3VuPltdXG57XG5cdGlmICghQXJyYXkuaXNBcnJheShzaXRlSUQpKVxuXHR7XG5cdFx0c2l0ZUlEID0gW3NpdGVJRF07XG5cdH1cblx0aWYgKCFBcnJheS5pc0FycmF5KG5vdmVsX2lkKSlcblx0e1xuXHRcdG5vdmVsX2lkID0gW25vdmVsX2lkXTtcblx0fVxuXG5cdHNpdGVJRCA9IGFycmF5X3VuaXF1ZV9vdmVyd3JpdGUoc2l0ZUlELm1hcCh2ID0+IFN0cmluZyh2KSkpO1xuXHRub3ZlbF9pZCA9IGFycmF5X3VuaXF1ZV9vdmVyd3JpdGUobm92ZWxfaWQubWFwKHYgPT4gU3RyaW5nKHYpKSk7XG5cblx0bGV0IGd1biA9IHVzZUd1bigpO1xuXG5cdHJldHVybiBzaXRlSURcblx0XHQucmVkdWNlKChhLCBzaXRlSUQpID0+IHtcblxuXG5cdFx0KG5vdmVsX2lkIGFzIHN0cmluZ1tdKS5mb3JFYWNoKG5vdmVsX2lkID0+IHtcblxuXHRcdFx0Ly9jb25zb2xlLmxvZyhzaXRlSUQsIG5vdmVsX2lkKTtcblxuXHRcdFx0Ly8gQHRzLWlnbm9yZVxuXHRcdFx0YS5wdXNoKGd1bi5nZXQoJ2VwdWItZmlsZScpLmdldChzaXRlSUQpLmdldChub3ZlbF9pZCkpXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gYTtcblx0fSwgW10pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9taXNlR3VuRXB1YkZpbGU8VD4oc2l0ZUlEOiBzdHJpbmcgfCBzdHJpbmdbXSwgbm92ZWxfaWQ6IHN0cmluZyB8IHN0cmluZ1tdKVxue1xuXHRyZXR1cm4gYWxsR3VuRXB1YkZpbGUoc2l0ZUlELCBub3ZlbF9pZCkubWFwKG5vZGUgPT4gbm9kZS50aGVuKCkgYXMgUHJvbWlzZTxUPilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhY2VHdW5FcHViRmlsZShzaXRlSUQ6IHN0cmluZyB8IHN0cmluZ1tdLCBub3ZlbF9pZDogc3RyaW5nIHwgc3RyaW5nW10pXG57XG5cdHJldHVybiBCbHVlYmlyZC5yYWNlPElHdW5FcHViTm9kZT4ocHJvbWlzZUd1bkVwdWJGaWxlKHNpdGVJRCwgbm92ZWxfaWQpKVxuXHRcdC8vLnRhcCh2ID0+IGNvbnNvbGUuZGlyKHYpKVxuXHQ7XG59XG4iXX0=