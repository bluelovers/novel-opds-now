"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.raceGunEpubFile = exports.nodeGunEpubFile = exports.promiseGunEpubFile = exports.allGunEpubFile = exports.makeArrayEntrys = void 0;
const setup_1 = __importDefault(require("../../server/gun/setup"));
const bluebird_1 = __importDefault(require("bluebird"));
const array_hyper_unique_1 = require("array-hyper-unique");
const retryGunNode_1 = __importDefault(require("./retryGunNode"));
function makeArrayEntrys(siteID, novel_id) {
    if (!Array.isArray(siteID)) {
        siteID = [siteID];
    }
    if (!Array.isArray(novel_id)) {
        novel_id = [novel_id];
    }
    siteID = array_hyper_unique_1.array_unique_overwrite(siteID.map(v => String(v)));
    novel_id = array_hyper_unique_1.array_unique_overwrite(novel_id.map(v => String(v)));
    return siteID
        .reduce((a, siteID) => {
        siteID && novel_id.forEach(novel_id => {
            novel_id && a.push([siteID, novel_id]);
        });
        return a;
    }, []);
}
exports.makeArrayEntrys = makeArrayEntrys;
function allGunEpubFile(siteID, novel_id) {
    if (!Array.isArray(siteID)) {
        siteID = [siteID];
    }
    if (!Array.isArray(novel_id)) {
        novel_id = [novel_id];
    }
    siteID = array_hyper_unique_1.array_unique_overwrite(siteID.map(v => String(v)));
    novel_id = array_hyper_unique_1.array_unique_overwrite(novel_id.map(v => String(v)));
    return siteID
        .reduce((a, siteID) => {
        siteID && novel_id.forEach(novel_id => {
            novel_id && a.push(nodeGunEpubFile(siteID, novel_id));
        });
        return a;
    }, []);
}
exports.allGunEpubFile = allGunEpubFile;
function promiseGunEpubFile(siteID, novel_id) {
    return allGunEpubFile(siteID, novel_id)
        .map(node => retryGunNode_1.default(node).timeout(15 * 1000).catch(e => null));
}
exports.promiseGunEpubFile = promiseGunEpubFile;
function nodeGunEpubFile(siteID, novel_id) {
    return setup_1.default().get(siteID).get(novel_id);
}
exports.nodeGunEpubFile = nodeGunEpubFile;
function raceGunEpubFile(siteID, novel_id) {
    return bluebird_1.default.race(promiseGunEpubFile(siteID, novel_id));
}
exports.raceGunEpubFile = raceGunEpubFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXB1YkZpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJlcHViRmlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxtRUFBNEM7QUFDNUMsd0RBQWdDO0FBQ2hDLDJEQUE0RDtBQU01RCxrRUFBMEM7QUFFMUMsU0FBZ0IsZUFBZSxDQUFDLE1BQStCLEVBQUUsUUFBMEM7SUFFMUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQzFCO1FBQ0MsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDbEI7SUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFDNUI7UUFDQyxRQUFRLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN0QjtJQUVELE1BQU0sR0FBRywyQ0FBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RCxRQUFRLEdBQUcsMkNBQXNCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFaEUsT0FBTyxNQUFNO1NBQ1gsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBR3JCLE1BQU0sSUFBSyxRQUFxQixDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUVuRCxRQUFRLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFBO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxDQUFDLENBQUM7SUFDVixDQUFDLEVBQUUsRUFBd0IsQ0FBQyxDQUFBO0FBQzlCLENBQUM7QUF6QkQsMENBeUJDO0FBRUQsU0FBZ0IsY0FBYyxDQUFDLE1BQStCLEVBQUUsUUFBMEM7SUFFekcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQzFCO1FBQ0MsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDbEI7SUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFDNUI7UUFDQyxRQUFRLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztLQUN0QjtJQUVELE1BQU0sR0FBRywyQ0FBc0IsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RCxRQUFRLEdBQUcsMkNBQXNCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFaEUsT0FBUSxNQUFnQztTQUN0QyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFHckIsTUFBTSxJQUFLLFFBQXFCLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBSW5ELFFBQVEsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQTtRQUN2RCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxDQUFDO0lBQ1YsQ0FBQyxFQUFFLEVBQTBDLENBQUMsQ0FBQTtBQUMvQyxDQUFDO0FBM0JELHdDQTJCQztBQUVELFNBQWdCLGtCQUFrQixDQUFtQixNQUF5QixFQUFFLFFBQTJCO0lBRTFHLE9BQU8sY0FBYyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUM7U0FDckMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsc0JBQVksQ0FBSSxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDekUsQ0FBQztBQUpELGdEQUlDO0FBRUQsU0FBZ0IsZUFBZSxDQUFtQixNQUFjLEVBQUUsUUFBZ0I7SUFHakYsT0FBTyxlQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBNkIsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQUNqRSxDQUFDO0FBSkQsMENBSUM7QUFFRCxTQUFnQixlQUFlLENBQUMsTUFBeUIsRUFBRSxRQUEyQjtJQUVyRixPQUFPLGtCQUFRLENBQUMsSUFBSSxDQUFlLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUV2RTtBQUNGLENBQUM7QUFMRCwwQ0FLQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB1c2VHdW4gZnJvbSAnLi4vLi4vc2VydmVyL2d1bi9zZXR1cCc7XG5pbXBvcnQgQmx1ZWJpcmQgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgYXJyYXlfdW5pcXVlX292ZXJ3cml0ZSB9IGZyb20gJ2FycmF5LWh5cGVyLXVuaXF1ZSc7XG5pbXBvcnQgeyBJR3VuRXB1Yk5vZGUgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgR3VuIGZyb20gJ2d1bic7XG5pbXBvcnQgeyBJVFNWYWx1ZU9yQXJyYXkgfSBmcm9tICd0cy10eXBlJztcbmltcG9ydCB7IEVudW1JREtFWUxpc3QsIEVudW1JREtFWUxpc3RTdHJpbmcgfSBmcm9tICdub3ZlbC1kb3dubG9hZGVyL3NyYy9hbGwvY29uc3QnO1xuaW1wb3J0IHsgSUd1bkNoYWluUmVmZXJlbmNlIH0gZnJvbSAnZ3VuL3R5cGVzL2NoYWluJztcbmltcG9ydCByZXRyeUd1bk5vZGUgZnJvbSAnLi9yZXRyeUd1bk5vZGUnO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFrZUFycmF5RW50cnlzKHNpdGVJRDogSVRTVmFsdWVPckFycmF5PHN0cmluZz4sIG5vdmVsX2lkOiBJVFNWYWx1ZU9yQXJyYXk8c3RyaW5nIHwgbnVtYmVyPilcbntcblx0aWYgKCFBcnJheS5pc0FycmF5KHNpdGVJRCkpXG5cdHtcblx0XHRzaXRlSUQgPSBbc2l0ZUlEXTtcblx0fVxuXHRpZiAoIUFycmF5LmlzQXJyYXkobm92ZWxfaWQpKVxuXHR7XG5cdFx0bm92ZWxfaWQgPSBbbm92ZWxfaWRdO1xuXHR9XG5cblx0c2l0ZUlEID0gYXJyYXlfdW5pcXVlX292ZXJ3cml0ZShzaXRlSUQubWFwKHYgPT4gU3RyaW5nKHYpKSk7XG5cdG5vdmVsX2lkID0gYXJyYXlfdW5pcXVlX292ZXJ3cml0ZShub3ZlbF9pZC5tYXAodiA9PiBTdHJpbmcodikpKTtcblxuXHRyZXR1cm4gc2l0ZUlEXG5cdFx0LnJlZHVjZSgoYSwgc2l0ZUlEKSA9PiB7XG5cblxuXHRcdFx0c2l0ZUlEICYmIChub3ZlbF9pZCBhcyBzdHJpbmdbXSkuZm9yRWFjaChub3ZlbF9pZCA9PiB7XG5cblx0XHRcdFx0bm92ZWxfaWQgJiYgYS5wdXNoKFtzaXRlSUQsIG5vdmVsX2lkXSlcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gYTtcblx0XHR9LCBbXSBhcyBbc3RyaW5nLCBzdHJpbmddW10pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbGxHdW5FcHViRmlsZShzaXRlSUQ6IElUU1ZhbHVlT3JBcnJheTxzdHJpbmc+LCBub3ZlbF9pZDogSVRTVmFsdWVPckFycmF5PHN0cmluZyB8IG51bWJlcj4pXG57XG5cdGlmICghQXJyYXkuaXNBcnJheShzaXRlSUQpKVxuXHR7XG5cdFx0c2l0ZUlEID0gW3NpdGVJRF07XG5cdH1cblx0aWYgKCFBcnJheS5pc0FycmF5KG5vdmVsX2lkKSlcblx0e1xuXHRcdG5vdmVsX2lkID0gW25vdmVsX2lkXTtcblx0fVxuXG5cdHNpdGVJRCA9IGFycmF5X3VuaXF1ZV9vdmVyd3JpdGUoc2l0ZUlELm1hcCh2ID0+IFN0cmluZyh2KSkpO1xuXHRub3ZlbF9pZCA9IGFycmF5X3VuaXF1ZV9vdmVyd3JpdGUobm92ZWxfaWQubWFwKHYgPT4gU3RyaW5nKHYpKSk7XG5cblx0cmV0dXJuIChzaXRlSUQgYXMgRW51bUlES0VZTGlzdFN0cmluZ1tdKVxuXHRcdC5yZWR1Y2UoKGEsIHNpdGVJRCkgPT4ge1xuXG5cblx0XHRcdHNpdGVJRCAmJiAobm92ZWxfaWQgYXMgc3RyaW5nW10pLmZvckVhY2gobm92ZWxfaWQgPT4ge1xuXG5cdFx0XHQvL2NvbnNvbGUubG9nKHNpdGVJRCwgbm92ZWxfaWQpO1xuXG5cdFx0XHRcdG5vdmVsX2lkICYmIGEucHVzaChub2RlR3VuRXB1YkZpbGUoc2l0ZUlELCBub3ZlbF9pZCkpXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gYTtcblx0fSwgW10gYXMgUmV0dXJuVHlwZTx0eXBlb2Ygbm9kZUd1bkVwdWJGaWxlPltdKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvbWlzZUd1bkVwdWJGaWxlPFQgPSBJR3VuRXB1Yk5vZGU+KHNpdGVJRDogc3RyaW5nIHwgc3RyaW5nW10sIG5vdmVsX2lkOiBzdHJpbmcgfCBzdHJpbmdbXSlcbntcblx0cmV0dXJuIGFsbEd1bkVwdWJGaWxlKHNpdGVJRCwgbm92ZWxfaWQpXG5cdFx0Lm1hcChub2RlID0+IHJldHJ5R3VuTm9kZTxUPihub2RlKS50aW1lb3V0KDE1ICogMTAwMCkuY2F0Y2goZSA9PiBudWxsKSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vZGVHdW5FcHViRmlsZTxUID0gSUd1bkVwdWJOb2RlPihzaXRlSUQ6IHN0cmluZywgbm92ZWxfaWQ6IHN0cmluZyk6IElHdW5DaGFpblJlZmVyZW5jZTxULCBzdHJpbmcsIGZhbHNlPlxue1xuXHQvLyBAdHMtaWdub3JlXG5cdHJldHVybiB1c2VHdW4oKS5nZXQoc2l0ZUlEIGFzIEVudW1JREtFWUxpc3RTdHJpbmcpLmdldChub3ZlbF9pZClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJhY2VHdW5FcHViRmlsZShzaXRlSUQ6IHN0cmluZyB8IHN0cmluZ1tdLCBub3ZlbF9pZDogc3RyaW5nIHwgc3RyaW5nW10pXG57XG5cdHJldHVybiBCbHVlYmlyZC5yYWNlPElHdW5FcHViTm9kZT4ocHJvbWlzZUd1bkVwdWJGaWxlKHNpdGVJRCwgbm92ZWxfaWQpKVxuXHRcdC8vLnRhcCh2ID0+IGNvbnNvbGUuZGlyKHYpKVxuXHQ7XG59XG4iXX0=